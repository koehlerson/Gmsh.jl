var documenterSearchIndex = {"docs":
[{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t5.jl\"","category":"page"},{"location":"examples/t5/#Tutorial-5","page":"Tutorial 5","title":"Tutorial 5","text":"","category":"section"},{"location":"examples/t5/#Mesh-sizes,-holes-in-volumes","page":"Tutorial 5","title":"Mesh sizes, holes in volumes","text":"","category":"section"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"import gmsh","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.initialize()","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.add(\"t5\")","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"lcar1 = .1\nlcar2 = .0005\nlcar3 = .055","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"If we wanted to change these mesh sizes globally (without changing the above definitions), we could give a global scaling factor for all mesh sizes with e.g.","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.option.setNumber(\"Mesh.MeshSizeFactor\", 0.1); See Tutorial 10 for more information about mesh sizes.","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"We proceed by defining some elementary entities describing a truncated cube:","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.geo.addPoint(0.5,0.5,0.5, lcar2, 1)\ngmsh.model.geo.addPoint(0.5,0.5,0, lcar1, 2)\ngmsh.model.geo.addPoint(0,0.5,0.5, lcar1, 3)\ngmsh.model.geo.addPoint(0,0,0.5, lcar1, 4)\ngmsh.model.geo.addPoint(0.5,0,0.5, lcar1, 5)\ngmsh.model.geo.addPoint(0.5,0,0, lcar1, 6)\ngmsh.model.geo.addPoint(0,0.5,0, lcar1, 7)\ngmsh.model.geo.addPoint(0,1,0, lcar1, 8)\ngmsh.model.geo.addPoint(1,1,0, lcar1, 9)\ngmsh.model.geo.addPoint(0,0,1, lcar1, 10)\ngmsh.model.geo.addPoint(0,1,1, lcar1, 11)\ngmsh.model.geo.addPoint(1,1,1, lcar1, 12)\ngmsh.model.geo.addPoint(1,0,1, lcar1, 13)\ngmsh.model.geo.addPoint(1,0,0, lcar1, 14)","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.geo.addLine(8,9, 1);   gmsh.model.geo.addLine(9,12, 2)\ngmsh.model.geo.addLine(12,11, 3); gmsh.model.geo.addLine(11,8, 4)\ngmsh.model.geo.addLine(9,14, 5);  gmsh.model.geo.addLine(14,13, 6)\ngmsh.model.geo.addLine(13,12, 7); gmsh.model.geo.addLine(11,10, 8)\ngmsh.model.geo.addLine(10,13, 9); gmsh.model.geo.addLine(10,4, 10)\ngmsh.model.geo.addLine(4,5, 11);  gmsh.model.geo.addLine(5,6, 12)\ngmsh.model.geo.addLine(6,2, 13);  gmsh.model.geo.addLine(2,1, 14)\ngmsh.model.geo.addLine(1,3, 15);  gmsh.model.geo.addLine(3,7, 16)\ngmsh.model.geo.addLine(7,2, 17);  gmsh.model.geo.addLine(3,4, 18)\ngmsh.model.geo.addLine(5,1, 19);  gmsh.model.geo.addLine(7,8, 20)\ngmsh.model.geo.addLine(6,14, 21);\nnothing #hide","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.geo.addCurveLoop([-11,-19,-15,-18], 22)\ngmsh.model.geo.addPlaneSurface([22], 23)\ngmsh.model.geo.addCurveLoop([16,17,14,15], 24)\ngmsh.model.geo.addPlaneSurface([24], 25)\ngmsh.model.geo.addCurveLoop([-17,20,1,5,-21,13], 26)\ngmsh.model.geo.addPlaneSurface([26], 27)\ngmsh.model.geo.addCurveLoop([-4,-1,-2,-3], 28)\ngmsh.model.geo.addPlaneSurface([28], 29)\ngmsh.model.geo.addCurveLoop([-7,2,-5,-6], 30)\ngmsh.model.geo.addPlaneSurface([30], 31)\ngmsh.model.geo.addCurveLoop([6,-9,10,11,12,21], 32)\ngmsh.model.geo.addPlaneSurface([32], 33)\ngmsh.model.geo.addCurveLoop([7,3,8,9], 34)\ngmsh.model.geo.addPlaneSurface([34], 35)\ngmsh.model.geo.addCurveLoop([-10,18,-16,-20,4,-8], 36)\ngmsh.model.geo.addPlaneSurface([36], 37)\ngmsh.model.geo.addCurveLoop([-14,-13,-12,19], 38)\ngmsh.model.geo.addPlaneSurface([38], 39)","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"shells = []","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"sl = gmsh.model.geo.addSurfaceLoop([35,31,29,37,33,23,39,25,27])\npush!(shells, sl)","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"This function will create a spherical hole in a volume. We don't specify tags manually, and let the functions return them automatically:","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"function cheeseHole(x, y, z, r, lc, shells)\n    p1 = gmsh.model.geo.addPoint(x,  y,  z,   lc)\n    p2 = gmsh.model.geo.addPoint(x+r,y,  z,   lc)\n    p3 = gmsh.model.geo.addPoint(x,  y+r,z,   lc)\n    p4 = gmsh.model.geo.addPoint(x,  y,  z+r, lc)\n    p5 = gmsh.model.geo.addPoint(x-r,y,  z,   lc)\n    p6 = gmsh.model.geo.addPoint(x,  y-r,z,   lc)\n    p7 = gmsh.model.geo.addPoint(x,  y,  z-r, lc)\n\n    c1 = gmsh.model.geo.addCircleArc(p2,p1,p7)\n    c2 = gmsh.model.geo.addCircleArc(p7,p1,p5)\n    c3 = gmsh.model.geo.addCircleArc(p5,p1,p4)\n    c4 = gmsh.model.geo.addCircleArc(p4,p1,p2)\n    c5 = gmsh.model.geo.addCircleArc(p2,p1,p3)\n    c6 = gmsh.model.geo.addCircleArc(p3,p1,p5)\n    c7 = gmsh.model.geo.addCircleArc(p5,p1,p6)\n    c8 = gmsh.model.geo.addCircleArc(p6,p1,p2)\n    c9 = gmsh.model.geo.addCircleArc(p7,p1,p3)\n    c10 = gmsh.model.geo.addCircleArc(p3,p1,p4)\n    c11 = gmsh.model.geo.addCircleArc(p4,p1,p6)\n    c12 = gmsh.model.geo.addCircleArc(p6,p1,p7)\n\n    l1 = gmsh.model.geo.addCurveLoop([c5,c10,c4])\n    l2 = gmsh.model.geo.addCurveLoop([c9,-c5,c1])\n    l3 = gmsh.model.geo.addCurveLoop([c12,-c8,-c1])\n    l4 = gmsh.model.geo.addCurveLoop([c8,-c4,c11])\n    l5 = gmsh.model.geo.addCurveLoop([-c10,c6,c3])\n    l6 = gmsh.model.geo.addCurveLoop([-c11,-c3,c7])\n    l7 = gmsh.model.geo.addCurveLoop([-c2,-c7,-c12])\n    l8 = gmsh.model.geo.addCurveLoop([-c6,-c9,c2])\n\n    s1 = gmsh.model.geo.addSurfaceFilling([l1])\n    s2 = gmsh.model.geo.addSurfaceFilling([l2])\n    s3 = gmsh.model.geo.addSurfaceFilling([l3])\n    s4 = gmsh.model.geo.addSurfaceFilling([l4])\n    s5 = gmsh.model.geo.addSurfaceFilling([l5])\n    s6 = gmsh.model.geo.addSurfaceFilling([l6])\n    s7 = gmsh.model.geo.addSurfaceFilling([l7])\n    s8 = gmsh.model.geo.addSurfaceFilling([l8])\n\n    sl = gmsh.model.geo.addSurfaceLoop([s1, s2, s3, s4, s5, s6, s7, s8])\n    v = gmsh.model.geo.addVolume([sl])\n    push!(shells, sl)\n    return v\nend","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"We create five holes in the cube:","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"x = 0\ny = 0.75; z = 0; r = 0.09\nfor t in 1:5\n    global x, z\n    x += 0.166\n    z += 0.166\n    v = cheeseHole(x, y, z, r, lcar3, shells)\n    gmsh.model.geo.addPhysicalGroup(3, [v], t)\nend","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"The volume of the cube, without the 5 holes, is defined by 6 surface loops: the first surface loop defines the exterior surface; the surface loops other than the first one define holes:","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.geo.addVolume(shells, 186);\nnothing #hide","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.geo.synchronize()","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"We finally define a physical volume for the elements discretizing the cube, without the holes (for which physical groups were already defined in the cheeseHole() function):","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.addPhysicalGroup(3, [186], 10);\nnothing #hide","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"To generate a curvilinear mesh and optimize it to produce provably valid curved elements (see A. Johnen, J.-F. Remacle and C. Geuzaine. Geometric validity of curvilinear finite elements. Journal of Computational Physics 233, pp. 359-372, 2013; and T. Toulorge, C. Geuzaine, J.-F. Remacle, J. Lambrechts. Robust untangling of curvilinear meshes. Journal of Computational Physics 254, pp. 8-26, 2013), you can uncomment the following lines:","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.option.setNumber(\"Mesh.ElementOrder\", 2) gmsh.option.setNumber(\"Mesh.HighOrderOptimize\", 2)","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.model.mesh.generate(3)\ngmsh.write(\"t5.msh\")","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"gmsh.finalize()","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"","category":"page"},{"location":"examples/t5/","page":"Tutorial 5","title":"Tutorial 5","text":"This page was generated using Literate.jl.","category":"page"},{"location":"occ/occ/#OpenCASCADE-CAD-Kernel","page":"OpenCASCADE Kernel","title":"OpenCASCADE CAD Kernel","text":"","category":"section"},{"location":"occ/occ/","page":"OpenCASCADE Kernel","title":"OpenCASCADE Kernel","text":"The OpenCASCADE (occ) kernel is currently not natively shipped with gmsh_jll.jl. Thus, all functions only work if a full gmsh build is installed locally.","category":"page"},{"location":"occ/occ/","page":"OpenCASCADE Kernel","title":"OpenCASCADE Kernel","text":"gmsh.model.occ.addPoint\ngmsh.model.occ.addLine\ngmsh.model.occ.addCircleArc\ngmsh.model.occ.addCircle\ngmsh.model.occ.addEllipseArc\ngmsh.model.occ.addEllipse\ngmsh.model.occ.addSpline\ngmsh.model.occ.addBSpline\ngmsh.model.occ.addBezier\ngmsh.model.occ.addWire\ngmsh.model.occ.addCurveLoop\ngmsh.model.occ.addRectangle\ngmsh.model.occ.addDisk\ngmsh.model.occ.addPlaneSurface\ngmsh.model.occ.addSurfaceFilling\ngmsh.model.occ.addBSplineFilling\ngmsh.model.occ.addBezierFilling\ngmsh.model.occ.addBSplineSurface\ngmsh.model.occ.addBezierSurface\ngmsh.model.occ.addTrimmedSurface\ngmsh.model.occ.addSurfaceLoop\ngmsh.model.occ.addVolume\ngmsh.model.occ.addSphere\ngmsh.model.occ.addBox\ngmsh.model.occ.addCylinder\ngmsh.model.occ.addCone\ngmsh.model.occ.addWedge\ngmsh.model.occ.addTorus\ngmsh.model.occ.addThruSections\ngmsh.model.occ.addThickSolid\ngmsh.model.occ.extrude\ngmsh.model.occ.revolve\ngmsh.model.occ.addPipe\ngmsh.model.occ.fillet\ngmsh.model.occ.chamfer\ngmsh.model.occ.fuse\ngmsh.model.occ.intersect\ngmsh.model.occ.cut\ngmsh.model.occ.fragment\ngmsh.model.occ.translate\ngmsh.model.occ.rotate\ngmsh.model.occ.dilate\ngmsh.model.occ.mirror\ngmsh.model.occ.symmetrize\ngmsh.model.occ.affineTransform\ngmsh.model.occ.copy\ngmsh.model.occ.remove\ngmsh.model.occ.removeAllDuplicates\ngmsh.model.occ.healShapes\ngmsh.model.occ.importShapes\ngmsh.model.occ.getEntities\ngmsh.model.occ.getEntitiesInBoundingBox\ngmsh.model.occ.getBoundingBox\ngmsh.model.occ.getMass\ngmsh.model.occ.getCenterOfMass\ngmsh.model.occ.getMatrixOfInertia\ngmsh.model.occ.getMaxTag\ngmsh.model.occ.setMaxTag\ngmsh.model.occ.synchronize","category":"page"},{"location":"occ/occ/#gmsh.model.occ.addPoint","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addPoint","text":"gmsh.model.occ.addPoint(x, y, z, meshSize = 0., tag = -1)\n\nAdd a geometrical point in the OpenCASCADE CAD representation, at coordinates (x, y, z). If meshSize is > 0, add a meshing constraint at that point. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the point. (Note that the point will be added in the current model only after synchronize is called. This behavior holds for all the entities added in the occ module.)\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addLine","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addLine","text":"gmsh.model.occ.addLine(startTag, endTag, tag = -1)\n\nAdd a straight line segment in the OpenCASCADE CAD representation, between the two points with tags startTag and endTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the line.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addCircleArc","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addCircleArc","text":"gmsh.model.occ.addCircleArc(startTag, centerTag, endTag, tag = -1)\n\nAdd a circle arc in the OpenCASCADE CAD representation, between the two points with tags startTag and endTag, with center centerTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the circle arc.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addCircle","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addCircle","text":"gmsh.model.occ.addCircle(x, y, z, r, tag = -1, angle1 = 0., angle2 = 2*pi)\n\nAdd a circle of center (x, y, z) and radius r in the OpenCASCADE CAD representation. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If angle1 and angle2 are specified, create a circle arc between the two angles. Return the tag of the circle.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addEllipseArc","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addEllipseArc","text":"gmsh.model.occ.addEllipseArc(startTag, centerTag, majorTag, endTag, tag = -1)\n\nAdd an ellipse arc in the OpenCASCADE CAD representation, between the two points startTag and endTag, and with center centerTag and major axis point majorTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the ellipse arc. Note that OpenCASCADE does not allow creating ellipse arcs with the major radius smaller than the minor radius.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addEllipse","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addEllipse","text":"gmsh.model.occ.addEllipse(x, y, z, r1, r2, tag = -1, angle1 = 0., angle2 = 2*pi)\n\nAdd an ellipse of center (x, y, z) and radii r1 and r2 along the x- and y-axes, respectively, in the OpenCASCADE CAD representation. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If angle1 and angle2 are specified, create an ellipse arc between the two angles. Return the tag of the ellipse. Note that OpenCASCADE does not allow creating ellipses with the major radius (along the x-axis) smaller than or equal to the minor radius (along the y-axis): rotate the shape or use addCircle in such cases.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addSpline","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addSpline","text":"gmsh.model.occ.addSpline(pointTags, tag = -1)\n\nAdd a spline (C2 b-spline) curve in the OpenCASCADE CAD representation, going through the points pointTags. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the spline curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBSpline","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBSpline","text":"gmsh.model.occ.addBSpline(pointTags, tag = -1, degree = 3, weights = Cdouble[], knots = Cdouble[], multiplicities = Cint[])\n\nAdd a b-spline curve of degree degree in the OpenCASCADE CAD representation, with pointTags control points. If weights, knots or multiplicities are not provided, default parameters are computed automatically. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the b-spline curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBezier","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBezier","text":"gmsh.model.occ.addBezier(pointTags, tag = -1)\n\nAdd a Bezier curve in the OpenCASCADE CAD representation, with pointTags control points. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the Bezier curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addWire","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addWire","text":"gmsh.model.occ.addWire(curveTags, tag = -1, checkClosed = false)\n\nAdd a wire (open or closed) in the OpenCASCADE CAD representation, formed by the curves curveTags. Note that an OpenCASCADE wire can be made of curves that share geometrically identical (but topologically different) points. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the wire.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addCurveLoop","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addCurveLoop","text":"gmsh.model.occ.addCurveLoop(curveTags, tag = -1)\n\nAdd a curve loop (a closed wire) in the OpenCASCADE CAD representation, formed by the curves curveTags. curveTags should contain tags of curves forming a closed loop. Note that an OpenCASCADE curve loop can be made of curves that share geometrically identical (but topologically different) points. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the curve loop.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addRectangle","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addRectangle","text":"gmsh.model.occ.addRectangle(x, y, z, dx, dy, tag = -1, roundedRadius = 0.)\n\nAdd a rectangle in the OpenCASCADE CAD representation, with lower left corner at (x, y, z) and upper right corner at (x + dx, y + dy, z). If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Round the corners if roundedRadius is nonzero. Return the tag of the rectangle.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addDisk","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addDisk","text":"gmsh.model.occ.addDisk(xc, yc, zc, rx, ry, tag = -1)\n\nAdd a disk in the OpenCASCADE CAD representation, with center (xc, yc, zc) and radius rx along the x-axis and ry along the y-axis. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the disk.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addPlaneSurface","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addPlaneSurface","text":"gmsh.model.occ.addPlaneSurface(wireTags, tag = -1)\n\nAdd a plane surface in the OpenCASCADE CAD representation, defined by one or more curve loops (or closed wires) wireTags. The first curve loop defines the exterior contour; additional curve loop define holes. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addSurfaceFilling","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addSurfaceFilling","text":"gmsh.model.occ.addSurfaceFilling(wireTag, tag = -1, pointTags = Cint[])\n\nAdd a surface in the OpenCASCADE CAD representation, filling the curve loop wireTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface. If pointTags are provided, force the surface to pass through the given points.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBSplineFilling","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBSplineFilling","text":"gmsh.model.occ.addBSplineFilling(wireTag, tag = -1, type = \"\")\n\nAdd a BSpline surface in the OpenCASCADE CAD representation, filling the curve loop wireTag. The curve loop should be made of 2, 3 or 4 BSpline curves. The optional type argument specifies the type of filling: \"Stretch\" creates the flattest patch, \"Curved\" (the default) creates the most rounded patch, and \"Coons\" creates a rounded patch with less depth than \"Curved\". If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBezierFilling","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBezierFilling","text":"gmsh.model.occ.addBezierFilling(wireTag, tag = -1, type = \"\")\n\nAdd a Bezier surface in the OpenCASCADE CAD representation, filling the curve loop wireTag. The curve loop should be made of 2, 3 or 4 Bezier curves. The optional type argument specifies the type of filling: \"Stretch\" creates the flattest patch, \"Curved\" (the default) creates the most rounded patch, and \"Coons\" creates a rounded patch with less depth than \"Curved\". If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBSplineSurface","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBSplineSurface","text":"gmsh.model.occ.addBSplineSurface(pointTags, numPointsU, tag = -1, degreeU = 3, degreeV = 3, weights = Cdouble[], knotsU = Cdouble[], knotsV = Cdouble[], multiplicitiesU = Cint[], multiplicitiesV = Cint[], wireTags = Cint[], wire3D = false)\n\nAdd a b-spline surface of degree degreeU x degreeV in the OpenCASCADE CAD representation, with pointTags control points given as a single vector [Pu1v1, ... PunumPointsUv1, Pu1v2, ...]. If weights, knotsU, knotsV, multiplicitiesU or multiplicitiesV are not provided, default parameters are computed automatically. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If wireTags is provided, trim the b-spline patch using the provided wires: the first wire defines the external contour, the others define holes. If wire3D is set, consider wire curves as 3D curves and project them on the b-spline surface; otherwise consider the wire curves as defined in the parametric space of the surface. Return the tag of the b-spline surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBezierSurface","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBezierSurface","text":"gmsh.model.occ.addBezierSurface(pointTags, numPointsU, tag = -1, wireTags = Cint[], wire3D = false)\n\nAdd a Bezier surface in the OpenCASCADE CAD representation, with pointTags control points given as a single vector [Pu1v1, ... PunumPointsUv1, Pu1v2, ...]. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If wireTags is provided, trim the Bezier patch using the provided wires: the first wire defines the external contour, the others define holes. If wire3D is set, consider wire curves as 3D curves and project them on the Bezier surface; otherwise consider the wire curves as defined in the parametric space of the surface. Return the tag of the Bezier surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addTrimmedSurface","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addTrimmedSurface","text":"gmsh.model.occ.addTrimmedSurface(surfaceTag, wireTags = Cint[], wire3D = false, tag = -1)\n\nTrim the surface surfaceTag with the wires wireTags, replacing any existing trimming curves. The first wire defines the external contour, the others define holes. If wire3D is set, consider wire curves as 3D curves and project them on the surface; otherwise consider the wire curves as defined in the parametric space of the surface. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the trimmed surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addSurfaceLoop","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addSurfaceLoop","text":"gmsh.model.occ.addSurfaceLoop(surfaceTags, tag = -1, sewing = false)\n\nAdd a surface loop (a closed shell) in the OpenCASCADE CAD representation, formed by surfaceTags.  If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface loop. Setting sewing allows to build a shell made of surfaces that share geometrically identical (but topologically different) curves.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addVolume","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addVolume","text":"gmsh.model.occ.addVolume(shellTags, tag = -1)\n\nAdd a volume (a region) in the OpenCASCADE CAD representation, defined by one or more surface loops shellTags. The first surface loop defines the exterior boundary; additional surface loop define holes. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the volume.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addSphere","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addSphere","text":"gmsh.model.occ.addSphere(xc, yc, zc, radius, tag = -1, angle1 = -pi/2, angle2 = pi/2, angle3 = 2*pi)\n\nAdd a sphere of center (xc, yc, zc) and radius r in the OpenCASCADE CAD representation. The optional angle1 and angle2 arguments define the polar angle opening (from -Pi/2 to Pi/2). The optional angle3 argument defines the azimuthal opening (from 0 to 2*Pi). If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the sphere.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addBox","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addBox","text":"gmsh.model.occ.addBox(x, y, z, dx, dy, dz, tag = -1)\n\nAdd a parallelepipedic box in the OpenCASCADE CAD representation, defined by a point (x, y, z) and the extents along the x-, y- and z-axes. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the box.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addCylinder","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addCylinder","text":"gmsh.model.occ.addCylinder(x, y, z, dx, dy, dz, r, tag = -1, angle = 2*pi)\n\nAdd a cylinder in the OpenCASCADE CAD representation, defined by the center (x, y, z) of its first circular face, the 3 components (dx, dy, dz) of the vector defining its axis and its radius r. The optional angle argument defines the angular opening (from 0 to 2*Pi). If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the cylinder.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addCone","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addCone","text":"gmsh.model.occ.addCone(x, y, z, dx, dy, dz, r1, r2, tag = -1, angle = 2*pi)\n\nAdd a cone in the OpenCASCADE CAD representation, defined by the center (x, y, z) of its first circular face, the 3 components of the vector (dx, dy, dz) defining its axis and the two radii r1 and r2 of the faces (these radii can be zero). If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. angle defines the optional angular opening (from 0 to 2*Pi). Return the tag of the cone.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addWedge","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addWedge","text":"gmsh.model.occ.addWedge(x, y, z, dx, dy, dz, tag = -1, ltx = 0.)\n\nAdd a right angular wedge in the OpenCASCADE CAD representation, defined by the right-angle point (x, y, z) and the 3 extends along the x-, y- and z-axes (dx, dy, dz). If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. The optional argument ltx defines the top extent along the x-axis. Return the tag of the wedge.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addTorus","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addTorus","text":"gmsh.model.occ.addTorus(x, y, z, r1, r2, tag = -1, angle = 2*pi)\n\nAdd a torus in the OpenCASCADE CAD representation, defined by its center (x, y, z) and its 2 radii r and r2. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. The optional argument angle defines the angular opening (from 0 to 2*Pi). Return the tag of the wedge.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addThruSections","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addThruSections","text":"gmsh.model.occ.addThruSections(wireTags, tag = -1, makeSolid = true, makeRuled = false, maxDegree = -1)\n\nAdd a volume (if the optional argument makeSolid is set) or surfaces in the OpenCASCADE CAD representation, defined through the open or closed wires wireTags. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. The new entities are returned in outDimTags. If the optional argument makeRuled is set, the surfaces created on the boundary are forced to be ruled surfaces. If maxDegree is positive, set the maximal degree of resulting surface.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addThickSolid","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addThickSolid","text":"gmsh.model.occ.addThickSolid(volumeTag, excludeSurfaceTags, offset, tag = -1)\n\nAdd a hollowed volume in the OpenCASCADE CAD representation, built from an initial volume volumeTag and a set of faces from this volume excludeSurfaceTags, which are to be removed. The remaining faces of the volume become the walls of the hollowed solid, with thickness offset. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.extrude","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.extrude","text":"gmsh.model.occ.extrude(dimTags, dx, dy, dz, numElements = Cint[], heights = Cdouble[], recombine = false)\n\nExtrude the entities dimTags in the OpenCASCADE CAD representation, using a translation along (dx, dy, dz). Return extruded entities in outDimTags. If numElements is not empty, also extrude the mesh: the entries in numElements give the number of elements in each layer. If height is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If recombine is set, recombine the mesh in the layers.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.revolve","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.revolve","text":"gmsh.model.occ.revolve(dimTags, x, y, z, ax, ay, az, angle, numElements = Cint[], heights = Cdouble[], recombine = false)\n\nExtrude the entities dimTags in the OpenCASCADE CAD representation, using a rotation of angle radians around the axis of revolution defined by the point (x, y, z) and the direction (ax, ay, az). Return extruded entities in outDimTags. If numElements is not empty, also extrude the mesh: the entries in numElements give the number of elements in each layer. If height is not empty, it provides the (cumulative) height of the different layers, normalized to 1. When the mesh is extruded the angle should be strictly smaller than 2*Pi. If recombine is set, recombine the mesh in the layers.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.addPipe","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.addPipe","text":"gmsh.model.occ.addPipe(dimTags, wireTag)\n\nAdd a pipe in the OpenCASCADE CAD representation, by extruding the entities dimTags along the wire wireTag. Return the pipe in outDimTags.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.fillet","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.fillet","text":"gmsh.model.occ.fillet(volumeTags, curveTags, radii, removeVolume = true)\n\nFillet the volumes volumeTags on the curves curveTags with radii radii. The radii vector can either contain a single radius, as many radii as curveTags, or twice as many as curveTags (in which case different radii are provided for the begin and end points of the curves). Return the filleted entities in outDimTags. Remove the original volume if removeVolume is set.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.chamfer","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.chamfer","text":"gmsh.model.occ.chamfer(volumeTags, curveTags, surfaceTags, distances, removeVolume = true)\n\nChamfer the volumes volumeTags on the curves curveTags with distances distances measured on surfaces surfaceTags. The distances vector can either contain a single distance, as many distances as curveTags and surfaceTags, or twice as many as curveTags and surfaceTags (in which case the first in each pair is measured on the corresponding surface in surfaceTags, the other on the other adjacent surface). Return the chamfered entities in outDimTags. Remove the original volume if removeVolume is set.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.fuse","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.fuse","text":"gmsh.model.occ.fuse(objectDimTags, toolDimTags, tag = -1, removeObject = true, removeTool = true)\n\nCompute the boolean union (the fusion) of the entities objectDimTags and toolDimTags in the OpenCASCADE CAD representation. Return the resulting entities in outDimTags. If tag is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if removeObject is set. Remove the tool if removeTool is set.\n\nReturn outDimTags, outDimTagsMap.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.intersect","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.intersect","text":"gmsh.model.occ.intersect(objectDimTags, toolDimTags, tag = -1, removeObject = true, removeTool = true)\n\nCompute the boolean intersection (the common parts) of the entities objectDimTags and toolDimTags in the OpenCASCADE CAD representation. Return the resulting entities in outDimTags. If tag is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if removeObject is set. Remove the tool if removeTool is set.\n\nReturn outDimTags, outDimTagsMap.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.cut","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.cut","text":"gmsh.model.occ.cut(objectDimTags, toolDimTags, tag = -1, removeObject = true, removeTool = true)\n\nCompute the boolean difference between the entities objectDimTags and toolDimTags in the OpenCASCADE CAD representation. Return the resulting entities in outDimTags. If tag is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if removeObject is set. Remove the tool if removeTool is set.\n\nReturn outDimTags, outDimTagsMap.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.fragment","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.fragment","text":"gmsh.model.occ.fragment(objectDimTags, toolDimTags, tag = -1, removeObject = true, removeTool = true)\n\nCompute the boolean fragments (general fuse) of the entities objectDimTags and toolDimTags in the OpenCASCADE CAD representation. Return the resulting entities in outDimTags. If tag is positive, try to set the tag explicitly (only valid if the boolean operation results in a single entity). Remove the object if removeObject is set. Remove the tool if removeTool is set.\n\nReturn outDimTags, outDimTagsMap.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.translate","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.translate","text":"gmsh.model.occ.translate(dimTags, dx, dy, dz)\n\nTranslate the entities dimTags in the OpenCASCADE CAD representation along (dx, dy, dz).\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.rotate","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.rotate","text":"gmsh.model.occ.rotate(dimTags, x, y, z, ax, ay, az, angle)\n\nRotate the entities dimTags in the OpenCASCADE CAD representation by angle radians around the axis of revolution defined by the point (x, y, z) and the direction (ax, ay, az).\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.dilate","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.dilate","text":"gmsh.model.occ.dilate(dimTags, x, y, z, a, b, c)\n\nScale the entities dimTags in the OpenCASCADE CAD representation by factors a, b and c along the three coordinate axes; use (x, y, z) as the center of the homothetic transformation.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.mirror","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.mirror","text":"gmsh.model.occ.mirror(dimTags, a, b, c, d)\n\nMirror the entities dimTags in the OpenCASCADE CAD representation, with respect to the plane of equation a * x + b * y + c * z + d = 0.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.symmetrize","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.symmetrize","text":"gmsh.model.occ.symmetrize(dimTags, a, b, c, d)\n\nMirror the entities dimTags in the OpenCASCADE CAD representation, with respect to the plane of equation a * x + b * y + c * z + d = 0. (This is a synonym for mirror, which will be deprecated in a future release.)\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.affineTransform","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.affineTransform","text":"gmsh.model.occ.affineTransform(dimTags, a)\n\nApply a general affine transformation matrix a (16 entries of a 4x4 matrix, by row; only the 12 first can be provided for convenience) to the entities dimTags in the OpenCASCADE CAD representation.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.copy","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.copy","text":"gmsh.model.occ.copy(dimTags)\n\nCopy the entities dimTags in the OpenCASCADE CAD representation; the new entities are returned in outDimTags.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.remove","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.remove","text":"gmsh.model.occ.remove(dimTags, recursive = false)\n\nRemove the entities dimTags in the OpenCASCADE CAD representation. If recursive is true, remove all the entities on their boundaries, down to dimension 0.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.removeAllDuplicates","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.removeAllDuplicates","text":"gmsh.model.occ.removeAllDuplicates()\n\nRemove all duplicate entities in the OpenCASCADE CAD representation (different entities at the same geometrical location) after intersecting (using boolean fragments) all highest dimensional entities.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.healShapes","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.healShapes","text":"gmsh.model.occ.healShapes(dimTags = Tuple{Cint,Cint}[], tolerance = 1e-8, fixDegenerated = true, fixSmallEdges = true, fixSmallFaces = true, sewFaces = true, makeSolids = true)\n\nApply various healing procedures to the entities dimTags (or to all the entities in the model if dimTags is empty) in the OpenCASCADE CAD representation. Return the healed entities in outDimTags. Available healing options are listed in the Gmsh reference manual.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.importShapes","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.importShapes","text":"gmsh.model.occ.importShapes(fileName, highestDimOnly = true, format = \"\")\n\nImport BREP, STEP or IGES shapes from the file fileName in the OpenCASCADE CAD representation. The imported entities are returned in outDimTags. If the optional argument highestDimOnly is set, only import the highest dimensional entities in the file. The optional argument format can be used to force the format of the file (currently \"brep\", \"step\" or \"iges\").\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getEntities","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getEntities","text":"gmsh.model.occ.getEntities(dim = -1)\n\nGet all the OpenCASCADE entities. If dim is >= 0, return only the entities of the specified dimension (e.g. points if dim == 0). The entities are returned as a vector of (dim, tag) integer pairs.\n\nReturn dimTags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getEntitiesInBoundingBox","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getEntitiesInBoundingBox","text":"gmsh.model.occ.getEntitiesInBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax, dim = -1)\n\nGet the OpenCASCADE entities in the bounding box defined by the two points (xmin, ymin, zmin) and (xmax, ymax, zmax). If dim is >= 0, return only the entities of the specified dimension (e.g. points if dim == 0).\n\nReturn tags.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getBoundingBox","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getBoundingBox","text":"gmsh.model.occ.getBoundingBox(dim, tag)\n\nGet the bounding box (xmin, ymin, zmin), (xmax, ymax, zmax) of the OpenCASCADE entity of dimension dim and tag tag.\n\nReturn xmin, ymin, zmin, xmax, ymax, zmax.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getMass","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getMass","text":"gmsh.model.occ.getMass(dim, tag)\n\nGet the mass of the OpenCASCADE entity of dimension dim and tag tag.\n\nReturn mass.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getCenterOfMass","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getCenterOfMass","text":"gmsh.model.occ.getCenterOfMass(dim, tag)\n\nGet the center of mass of the OpenCASCADE entity of dimension dim and tag tag.\n\nReturn x, y, z.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getMatrixOfInertia","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getMatrixOfInertia","text":"gmsh.model.occ.getMatrixOfInertia(dim, tag)\n\nGet the matrix of inertia (by row) of the OpenCASCADE entity of dimension dim and tag tag.\n\nReturn mat.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.getMaxTag","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.getMaxTag","text":"gmsh.model.occ.getMaxTag(dim)\n\nGet the maximum tag of entities of dimension dim in the OpenCASCADE CAD representation.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.setMaxTag","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.setMaxTag","text":"gmsh.model.occ.setMaxTag(dim, maxTag)\n\nSet the maximum tag maxTag for entities of dimension dim in the OpenCASCADE CAD representation.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#gmsh.model.occ.synchronize","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.synchronize","text":"gmsh.model.occ.synchronize()\n\nSynchronize the OpenCASCADE CAD representation with the current Gmsh model. This can be called at any time, but since it involves a non trivial amount of processing, the number of synchronization points should normally be minimized. Without synchronization the entities in the OpenCASCADE CAD representation are not available to any function outside of the OpenCASCADE CAD kernel functions.\n\n\n\n\n\n","category":"function"},{"location":"occ/occ/#Meshing-Constraints-with-OCC-Kernel","page":"OpenCASCADE Kernel","title":"Meshing Constraints with OCC Kernel","text":"","category":"section"},{"location":"occ/occ/","page":"OpenCASCADE Kernel","title":"OpenCASCADE Kernel","text":"gmsh.model.occ.mesh.setSize","category":"page"},{"location":"occ/occ/#gmsh.model.occ.mesh.setSize","page":"OpenCASCADE Kernel","title":"gmsh.model.occ.mesh.setSize","text":"gmsh.model.occ.mesh.setSize(dimTags, size)\n\nSet a mesh size constraint on the entities dimTags in the OpenCASCADE CAD representation. Currently only entities of dimension 0 (points) are handled.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#Meshing-Constraints-with-the-Built-in-Kernel","page":"Mesh Constraints","title":"Meshing Constraints with the Built-in Kernel","text":"","category":"section"},{"location":"geo/mesh/","page":"Mesh Constraints","title":"Mesh Constraints","text":"gmsh.model.geo.mesh\ngmsh.model.geo.mesh.setSize\ngmsh.model.geo.mesh.setTransfiniteCurve\ngmsh.model.geo.mesh.setTransfiniteSurface\ngmsh.model.geo.mesh.setTransfiniteVolume\ngmsh.model.geo.mesh.setRecombine\ngmsh.model.geo.mesh.setSmoothing\ngmsh.model.geo.mesh.setReverse\ngmsh.model.geo.mesh.setAlgorithm\ngmsh.model.geo.mesh.setSizeFromBoundary","category":"page"},{"location":"geo/mesh/#gmsh.model.geo.mesh","page":"Mesh Constraints","title":"gmsh.model.geo.mesh","text":"module gmsh.model.geo.mesh\n\nBuilt-in CAD kernel meshing constraints\n\n\n\n\n\n","category":"module"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setSize","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setSize","text":"gmsh.model.geo.mesh.setSize(dimTags, size)\n\nSet a mesh size constraint on the entities dimTags in the built-in CAD kernel representation. Currently only entities of dimension 0 (points) are handled.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setTransfiniteCurve","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setTransfiniteCurve","text":"gmsh.model.geo.mesh.setTransfiniteCurve(tag, nPoints, meshType = \"Progression\", coef = 1.)\n\nSet a transfinite meshing constraint on the curve tag in the built-in CAD kernel representation, with numNodes nodes distributed according to meshType and coef. Currently supported types are \"Progression\" (geometrical progression with power coef) and \"Bump\" (refinement toward both extremities of the curve).\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setTransfiniteSurface","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setTransfiniteSurface","text":"gmsh.model.geo.mesh.setTransfiniteSurface(tag, arrangement = \"Left\", cornerTags = Cint[])\n\nSet a transfinite meshing constraint on the surface tag in the built-in CAD kernel representation. arrangement describes the arrangement of the triangles when the surface is not flagged as recombined: currently supported values are \"Left\", \"Right\", \"AlternateLeft\" and \"AlternateRight\". cornerTags can be used to specify the (3 or 4) corners of the transfinite interpolation explicitly; specifying the corners explicitly is mandatory if the surface has more that 3 or 4 points on its boundary.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setTransfiniteVolume","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setTransfiniteVolume","text":"gmsh.model.geo.mesh.setTransfiniteVolume(tag, cornerTags = Cint[])\n\nSet a transfinite meshing constraint on the surface tag in the built-in CAD kernel representation. cornerTags can be used to specify the (6 or 8) corners of the transfinite interpolation explicitly.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setRecombine","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setRecombine","text":"gmsh.model.geo.mesh.setRecombine(dim, tag, angle = 45.)\n\nSet a recombination meshing constraint on the entity of dimension dim and tag tag in the built-in CAD kernel representation. Currently only entities of dimension 2 (to recombine triangles into quadrangles) are supported.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setSmoothing","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setSmoothing","text":"gmsh.model.geo.mesh.setSmoothing(dim, tag, val)\n\nSet a smoothing meshing constraint on the entity of dimension dim and tag tag in the built-in CAD kernel representation. val iterations of a Laplace smoother are applied.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setReverse","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setReverse","text":"gmsh.model.geo.mesh.setReverse(dim, tag, val = true)\n\nSet a reverse meshing constraint on the entity of dimension dim and tag tag in the built-in CAD kernel representation. If val is true, the mesh orientation will be reversed with respect to the natural mesh orientation (i.e. the orientation consistent with the orientation of the geometry). If val is false, the mesh is left as-is.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setAlgorithm","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setAlgorithm","text":"gmsh.model.geo.mesh.setAlgorithm(dim, tag, val)\n\nSet the meshing algorithm on the entity of dimension dim and tag tag in the built-in CAD kernel representation. Currently only supported for dim == 2.\n\n\n\n\n\n","category":"function"},{"location":"geo/mesh/#gmsh.model.geo.mesh.setSizeFromBoundary","page":"Mesh Constraints","title":"gmsh.model.geo.mesh.setSizeFromBoundary","text":"gmsh.model.geo.mesh.setSizeFromBoundary(dim, tag, val)\n\nForce the mesh size to be extended from the boundary, or not, for the entity of dimension dim and tag tag in the built-in CAD kernel representation. Currently only supported for dim == 2.\n\n\n\n\n\n","category":"function"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t4.jl\"","category":"page"},{"location":"examples/t4/#Tutorial-4","page":"Tutorial 4","title":"Tutorial 4","text":"","category":"section"},{"location":"examples/t4/#Holes-in-surfaces,-annotations,-entity-colors","page":"Tutorial 4","title":"Holes in surfaces, annotations, entity colors","text":"","category":"section"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"import gmsh","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.initialize()","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.model.add(\"t4\")","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"cm = 1e-02\ne1 = 4.5 * cm; e2 = 6 * cm / 2; e3 =  5 * cm / 2\nh1 = 5 * cm; h2 = 10 * cm; h3 = 5 * cm; h4 = 2 * cm; h5 = 4.5 * cm\nR1 = 1 * cm; R2 = 1.5 * cm; r = 1 * cm\nLc1 = 0.01\nLc2 = 0.003","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"function hypot(a, b)\n    return sqrt(a * a + b * b)\nend","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"ccos = (-h5*R1 + e2 * hypot(h5, hypot(e2, R1))) / (h5*h5 + e2*e2)\nssin = sqrt(1 - ccos*ccos)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"We start by defining some points and some lines. To make the code shorter we can redefine a namespace:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory = gmsh.model.geo\nfactory.addPoint(-e1-e2, 0    , 0, Lc1, 1)\nfactory.addPoint(-e1-e2, h1   , 0, Lc1, 2)\nfactory.addPoint(-e3-r , h1   , 0, Lc2, 3)\nfactory.addPoint(-e3-r , h1+r , 0, Lc2, 4)\nfactory.addPoint(-e3   , h1+r , 0, Lc2, 5)\nfactory.addPoint(-e3   , h1+h2, 0, Lc1, 6)\nfactory.addPoint( e3   , h1+h2, 0, Lc1, 7)\nfactory.addPoint( e3   , h1+r , 0, Lc2, 8)\nfactory.addPoint( e3+r , h1+r , 0, Lc2, 9)\nfactory.addPoint( e3+r , h1   , 0, Lc2, 10)\nfactory.addPoint( e1+e2, h1   , 0, Lc1, 11)\nfactory.addPoint( e1+e2, 0    , 0, Lc1, 12)\nfactory.addPoint( e2   , 0    , 0, Lc1, 13)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addPoint( R1 / ssin, h5+R1*ccos, 0, Lc2, 14)\nfactory.addPoint( 0        , h5        , 0, Lc2, 15)\nfactory.addPoint(-R1 / ssin, h5+R1*ccos, 0, Lc2, 16)\nfactory.addPoint(-e2       , 0.0       , 0, Lc1, 17)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addPoint(-R2 , h1+h3   , 0, Lc2, 18)\nfactory.addPoint(-R2 , h1+h3+h4, 0, Lc2, 19)\nfactory.addPoint( 0  , h1+h3+h4, 0, Lc2, 20)\nfactory.addPoint( R2 , h1+h3+h4, 0, Lc2, 21)\nfactory.addPoint( R2 , h1+h3   , 0, Lc2, 22)\nfactory.addPoint( 0  , h1+h3   , 0, Lc2, 23)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addPoint( 0, h1+h3+h4+R2, 0, Lc2, 24)\nfactory.addPoint( 0, h1+h3-R2,    0, Lc2, 25)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addLine(1 , 17, 1)\nfactory.addLine(17, 16, 2)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Gmsh provides other curve primitives than straight lines: splines, B-splines, circle arcs, ellipse arcs, etc. Here we define a new circle arc, starting at point 14 and ending at point 16, with the circle's center being the point 15:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addCircleArc(14,15,16, 3)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Note that, in Gmsh, circle arcs should always be smaller than Pi. The OpenCASCADE geometry kernel does not have this limitation.","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"We can then define additional lines and circles, as well as a new surface:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addLine(14,13, 4)\nfactory.addLine(13,12, 5)\nfactory.addLine(12,11, 6)\nfactory.addLine(11,10, 7)\nfactory.addCircleArc(8,9,10, 8)\nfactory.addLine(8,7, 9)\nfactory.addLine(7,6, 10)\nfactory.addLine(6,5, 11)\nfactory.addCircleArc(3,4,5, 12)\nfactory.addLine(3,2, 13)\nfactory.addLine(2,1, 14)\nfactory.addLine(18,19, 15)\nfactory.addCircleArc(21,20,24, 16)\nfactory.addCircleArc(24,20,19, 17)\nfactory.addCircleArc(18,23,25, 18)\nfactory.addCircleArc(25,23,22, 19)\nfactory.addLine(21,22, 20)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"But we still need to define the exterior surface. Since this surface has a hole, its definition now requires two curves loops:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addCurveLoop([17,-15,18,19,-20,16], 21)\nfactory.addPlaneSurface([21], 22)\nfactory.addCurveLoop([11,-12,13,14,1,2,-3,4,5,6,7,-8,9,10], 23)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.addPlaneSurface([23,21], 24)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"As a general rule, if a surface has N holes, it is defined by N+1 curve loops: the first loop defines the exterior boundary; the other loops define the boundaries of the holes.","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"factory.synchronize()","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Finally, we can add some comments by creating a post-processing view containing some strings:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"v = gmsh.view.add(\"comments\")","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Add a text string in window coordinates, 10 pixels from the left and 10 pixels from the bottom:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.view.addListDataString(v, [10, -10], [\"Created with Gmsh\"])","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Add a text string in model coordinates centered at (X,Y,Z) = (0, 0.11, 0), with some style attributes:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.view.addListDataString(v, [0, 0.11, 0], [\"Hole\"],\n                            [\"Align\", \"Center\", \"Font\", \"Helvetica\"])","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"These annotations are handled by a list-based post-processing view. For large post-processing datasets, that contain actual field values defined on a mesh, you should use model-based post-processing views instead, which allow to efficiently store continuous or discontinuous scalar, vector and tensor fields, or arbitrary polynomial order.","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"Views and geometrical entities can be made to respond to double-click events, here to print some messages to the console:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.option.setString(\"View[0].DoubleClickedCommand\",\n                      \"Printf('View[0] has been double-clicked!');\")\ngmsh.option.setString(\n    \"Geometry.DoubleClickedLineCommand\",\n    \"Printf('Curve %g has been double-clicked!', Geometry.DoubleClickedEntityTag);\")","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"We can also change the color of some entities:","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.model.setColor([(2, 22)], 127, 127, 127)\ngmsh.model.setColor([(2, 24)], 160, 32, 240)\ngmsh.model.setColor([(1, i) for i in 1:14], 255, 0, 0)\ngmsh.model.setColor([(1, i) for i in 15:20], 255, 255, 0)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.model.mesh.generate(2)","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.write(\"t4.msh\")","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"gmsh.finalize()","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"","category":"page"},{"location":"examples/t4/","page":"Tutorial 4","title":"Tutorial 4","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t2.jl\"","category":"page"},{"location":"examples/t2/#Tutorial-2","page":"Tutorial 2","title":"Tutorial 2","text":"","category":"section"},{"location":"examples/t2/#Transformations,-extruded-geometries,-volumes","page":"Tutorial 2","title":"Transformations, extruded geometries, volumes","text":"","category":"section"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"import gmsh","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"If ARGS is passed to gmsh.initialize(), Gmsh will parse the command line in the same way as the standalone Gmsh app:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.initialize(append!([\"gmsh\"], ARGS))","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.add(\"t2\")","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Copied from Tutorial 1:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"lc = 1e-2\ngmsh.model.geo.addPoint(0, 0, 0, lc, 1)\ngmsh.model.geo.addPoint(.1, 0,  0, lc, 2)\ngmsh.model.geo.addPoint(.1, .3, 0, lc, 3)\ngmsh.model.geo.addPoint(0, .3, 0, lc, 4)\ngmsh.model.geo.addLine(1, 2, 1)\ngmsh.model.geo.addLine(3, 2, 2)\ngmsh.model.geo.addLine(3, 4, 3)\ngmsh.model.geo.addLine(4, 1, 4)\ngmsh.model.geo.addCurveLoop([4, 1, -2, 3], 1)\ngmsh.model.geo.addPlaneSurface([1], 1)\ngmsh.model.geo.synchronize()\ngmsh.model.addPhysicalGroup(0, [1, 2], 1)\ngmsh.model.addPhysicalGroup(1, [1, 2], 2)\ngmsh.model.addPhysicalGroup(2, [1], 6)\ngmsh.model.setPhysicalName(2, 6, \"My surface\")","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"We can then add new points and curves in the same way as we did in t1.jl:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addPoint(0, .4, 0, lc, 5)\ngmsh.model.geo.addLine(4, 5, 5)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"But Gmsh also provides tools to transform (translate, rotate, etc.) elementary entities or copies of elementary entities.  Geometrical transformations take a vector of pairs of integers as first argument, which contains the list of entities, represented by (dimension, tag) pairs.  For example, the point 5 (dimension=0, tag=5) can be moved by 0.02 to the left (dx=-0.02, dy=0, dz=0) with","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.translate([(0, 5)], -0.02, 0, 0)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"And it can be further rotated by -Pi/4 around (0, 0.3, 0) (with the rotation along the z axis) with:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.rotate([(0, 5)], 0,0.3,0, 0,0,1, -pi/4)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Note that there are no units in Gmsh: coordinates are just numbers - it's up to the user to associate a meaning to them.","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Point 3 can be duplicated and translated by 0.05 along the y axis by using the copy() function, which takes a vector of (dim, tag) pairs as input, and returns another vector of (dim, tag) pairs:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"ov = gmsh.model.geo.copy([(0, 3)])\ngmsh.model.geo.translate(ov, 0, 0.05, 0)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"The new point tag is available in ov[0][1], and can be used to create new lines:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addLine(3, ov[1][2], 7)\ngmsh.model.geo.addLine(ov[1][2], 5, 8)\ngmsh.model.geo.addCurveLoop([5,-8,-7,3], 10)\ngmsh.model.geo.addPlaneSurface([10], 11)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"In the same way, we can translate copies of the two surfaces 1 and 11 to the right with the following command:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"ov = gmsh.model.geo.copy([(2, 1), (2, 11)])\ngmsh.model.geo.translate(ov, 0.12, 0, 0)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"println(\"New surfaces \", ov[1][2], \" and \", ov[2][2])","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Volumes are the fourth type of elementary entities in Gmsh. In the same way one defines curve loops to build surfaces, one has to define surface loops (i.e. shells) to build volumes. The following volume does not have holes and thus consists of a single surface loop:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addPoint(0., 0.3, 0.12, lc, 100)\ngmsh.model.geo.addPoint(0.1, 0.3, 0.12, lc, 101)\ngmsh.model.geo.addPoint(0.1, 0.35, 0.12, lc, 102)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"We would like to retrieve the coordinates of point 5 to create point 103, so we synchronize the model, and use getValue()","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.synchronize()\nxyz = gmsh.model.getValue(0, 5, [])\ngmsh.model.geo.addPoint(xyz[1], xyz[2], 0.12, lc, 103)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addLine(4, 100, 110)\ngmsh.model.geo.addLine(3, 101, 111)\ngmsh.model.geo.addLine(6, 102, 112)\ngmsh.model.geo.addLine(5, 103, 113)\ngmsh.model.geo.addLine(103, 100, 114)\ngmsh.model.geo.addLine(100, 101, 115)\ngmsh.model.geo.addLine(101, 102, 116)\ngmsh.model.geo.addLine(102, 103, 117)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addCurveLoop([115, -111, 3, 110], 118)\ngmsh.model.geo.addPlaneSurface([118], 119)\ngmsh.model.geo.addCurveLoop([111, 116, -112, -7], 120)\ngmsh.model.geo.addPlaneSurface([120], 121)\ngmsh.model.geo.addCurveLoop([112, 117, -113, -8], 122)\ngmsh.model.geo.addPlaneSurface([122], 123)\ngmsh.model.geo.addCurveLoop([114, -110, 5, 113], 124)\ngmsh.model.geo.addPlaneSurface([124], 125)\ngmsh.model.geo.addCurveLoop([115, 116, 117, 114], 126)\ngmsh.model.geo.addPlaneSurface([126], 127)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.addSurfaceLoop([127, 119, 121, 123, 125, 11], 128)\ngmsh.model.geo.addVolume([128], 129)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"When a volume can be extruded from a surface, it is usually easier to use the extrude() function directly instead of creating all the points, curves and surfaces by hand. For example, the following command extrudes the surface 11 along the z axis and automatically creates a new volume (as well as all the needed points, curves and surfaces). As expected, the function takes a vector of (dim, tag) pairs as input as well as the translation vector, and returns a vector of (dim, tag) pairs as output:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"ov2 = gmsh.model.geo.extrude([ov[2]], 0, 0, 0.12)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Mesh sizes associated to geometrical points can be set by passing a vector of (dim, tag) pairs for the corresponding points:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.mesh.setSize([(0,103), (0,105), (0,109), (0,102), (0,28),\n                             (0, 24), (0,6), (0,5)], lc * 3)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"We finish by synchronizing the data from the built-in CAD kernel with the Gmsh model:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.geo.synchronize()","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"We group volumes 129 and 130 in a single physical group with tag 1 and name \"The volume\":","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.addPhysicalGroup(3, [129,130], 1)\ngmsh.model.setPhysicalName(3, 1, \"The volume\")","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.model.mesh.generate(3)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"We finally generate and save the mesh:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.write(\"t2.msh\")","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"Note that, if the transformation tools are handy to create complex geometries, it is also sometimes useful to generate the flat geometry, with an explicit representation of all the elementary entities.","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"With the built-in CAD kernel, this can be achieved by saving the model in the Gmsh Unrolled GEO format:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.write(\"t2.geo_unrolled\");","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"With the OpenCASCADE CAD kernel, unrolling the geometry can be achieved by exporting in the `OpenCASCADE BRep' format:","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.write(\"t2.brep\");","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"(OpenCASCADE geometries can also be exported as STEP files.)","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"It is important to note that Gmsh never translates geometry data into a common representation: all the operations on a geometrical entity are performed natively with the associated CAD kernel. Consequently, one cannot export a geometry constructed with the built-in kernel as an OpenCASCADE BRep file; or export an OpenCASCADE model as an Unrolled GEO file.","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"gmsh.finalize()","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"","category":"page"},{"location":"examples/t2/","page":"Tutorial 2","title":"Tutorial 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model/model/#Model-Functions","page":"Model","title":"Model Functions","text":"","category":"section"},{"location":"model/model/","page":"Model","title":"Model","text":"gmsh.model.add\ngmsh.model.remove\ngmsh.model.list\ngmsh.model.getCurrent\ngmsh.model.setCurrent\ngmsh.model.getEntities\ngmsh.model.setEntityName\ngmsh.model.getEntityName\ngmsh.model.getPhysicalGroups\ngmsh.model.getEntitiesForPhysicalGroup\ngmsh.model.getPhysicalGroupsForEntity\ngmsh.model.addPhysicalGroup\ngmsh.model.removePhysicalGroups\ngmsh.model.setPhysicalName\ngmsh.model.removePhysicalName\ngmsh.model.getPhysicalName\ngmsh.model.getBoundary\ngmsh.model.getAdjacencies\ngmsh.model.getEntitiesInBoundingBox\ngmsh.model.getBoundingBox\ngmsh.model.getDimension\ngmsh.model.addDiscreteEntity\ngmsh.model.removeEntities\ngmsh.model.removeEntityName\ngmsh.model.getType\ngmsh.model.getParent\ngmsh.model.getPartitions\ngmsh.model.getValue\ngmsh.model.getDerivative\ngmsh.model.getSecondDerivative\ngmsh.model.getCurvature\ngmsh.model.getPrincipalCurvatures\ngmsh.model.getNormal\ngmsh.model.getParametrization\ngmsh.model.getParametrizationBounds\ngmsh.model.isInside\ngmsh.model.getClosestPoint\ngmsh.model.reparametrizeOnSurface\ngmsh.model.setVisibility\ngmsh.model.getVisibility\ngmsh.model.setVisibilityPerWindow\ngmsh.model.setColor\ngmsh.model.getColor\ngmsh.model.setCoordinates","category":"page"},{"location":"model/model/#gmsh.model.add","page":"Model","title":"gmsh.model.add","text":"gmsh.model.add(name)\n\nAdd a new model, with name name, and set it as the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.remove","page":"Model","title":"gmsh.model.remove","text":"gmsh.model.remove()\n\nRemove the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.list","page":"Model","title":"gmsh.model.list","text":"gmsh.model.list()\n\nList the names of all models.\n\nReturn names.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getCurrent","page":"Model","title":"gmsh.model.getCurrent","text":"gmsh.model.getCurrent()\n\nGet the name of the current model.\n\nReturn name.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setCurrent","page":"Model","title":"gmsh.model.setCurrent","text":"gmsh.model.setCurrent(name)\n\nSet the current model to the model with name name. If several models have the same name, select the one that was added first.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getEntities","page":"Model","title":"gmsh.model.getEntities","text":"gmsh.model.getEntities(dim = -1)\n\nGet all the entities in the current model. If dim is >= 0, return only the entities of the specified dimension (e.g. points if dim == 0). The entities are returned as a vector of (dim, tag) integer pairs.\n\nReturn dimTags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setEntityName","page":"Model","title":"gmsh.model.setEntityName","text":"gmsh.model.setEntityName(dim, tag, name)\n\nSet the name of the entity of dimension dim and tag tag.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getEntityName","page":"Model","title":"gmsh.model.getEntityName","text":"gmsh.model.getEntityName(dim, tag)\n\nGet the name of the entity of dimension dim and tag tag.\n\nReturn name.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getPhysicalGroups","page":"Model","title":"gmsh.model.getPhysicalGroups","text":"gmsh.model.getPhysicalGroups(dim = -1)\n\nGet all the physical groups in the current model. If dim is >= 0, return only the entities of the specified dimension (e.g. physical points if dim == 0). The entities are returned as a vector of (dim, tag) integer pairs.\n\nReturn dimTags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getEntitiesForPhysicalGroup","page":"Model","title":"gmsh.model.getEntitiesForPhysicalGroup","text":"gmsh.model.getEntitiesForPhysicalGroup(dim, tag)\n\nGet the tags of the model entities making up the physical group of dimension dim and tag tag.\n\nReturn tags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getPhysicalGroupsForEntity","page":"Model","title":"gmsh.model.getPhysicalGroupsForEntity","text":"gmsh.model.getPhysicalGroupsForEntity(dim, tag)\n\nGet the tags of the physical groups (if any) to which the model entity of dimension dim and tag tag belongs.\n\nReturn physicalTags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.addPhysicalGroup","page":"Model","title":"gmsh.model.addPhysicalGroup","text":"gmsh.model.addPhysicalGroup(dim, tags, tag = -1)\n\nAdd a physical group of dimension dim, grouping the model entities with tags tags. Return the tag of the physical group, equal to tag if tag is positive, or a new tag if tag < 0.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.removePhysicalGroups","page":"Model","title":"gmsh.model.removePhysicalGroups","text":"gmsh.model.removePhysicalGroups(dimTags = Tuple{Cint,Cint}[])\n\nRemove the physical groups dimTags from the current model. If dimTags is empty, remove all groups.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setPhysicalName","page":"Model","title":"gmsh.model.setPhysicalName","text":"gmsh.model.setPhysicalName(dim, tag, name)\n\nSet the name of the physical group of dimension dim and tag tag.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.removePhysicalName","page":"Model","title":"gmsh.model.removePhysicalName","text":"gmsh.model.removePhysicalName(name)\n\nRemove the physical name name from the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getPhysicalName","page":"Model","title":"gmsh.model.getPhysicalName","text":"gmsh.model.getPhysicalName(dim, tag)\n\nGet the name of the physical group of dimension dim and tag tag.\n\nReturn name.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getBoundary","page":"Model","title":"gmsh.model.getBoundary","text":"gmsh.model.getBoundary(dimTags, combined = true, oriented = true, recursive = false)\n\nGet the boundary of the model entities dimTags. Return in outDimTags the boundary of the individual entities (if combined is false) or the boundary of the combined geometrical shape formed by all input entities (if combined is true). Return tags multiplied by the sign of the boundary entity if oriented is true. Apply the boundary operator recursively down to dimension 0 (i.e. to points) if recursive is true.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getAdjacencies","page":"Model","title":"gmsh.model.getAdjacencies","text":"gmsh.model.getAdjacencies(dim, tag)\n\nGet the upward and downward adjacencies of the model entity of dimension dim and tag tag. The upward vector returns the adjacent entities of dimension dim + 1; the downward vector returns the adjacent entities of dimension dim - 1.\n\nReturn upward, downward.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getEntitiesInBoundingBox","page":"Model","title":"gmsh.model.getEntitiesInBoundingBox","text":"gmsh.model.getEntitiesInBoundingBox(xmin, ymin, zmin, xmax, ymax, zmax, dim = -1)\n\nGet the model entities in the bounding box defined by the two points (xmin, ymin, zmin) and (xmax, ymax, zmax). If dim is >= 0, return only the entities of the specified dimension (e.g. points if dim == 0).\n\nReturn tags.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getBoundingBox","page":"Model","title":"gmsh.model.getBoundingBox","text":"gmsh.model.getBoundingBox(dim, tag)\n\nGet the bounding box (xmin, ymin, zmin), (xmax, ymax, zmax) of the model entity of dimension dim and tag tag. If dim and tag are negative, get the bounding box of the whole model.\n\nReturn xmin, ymin, zmin, xmax, ymax, zmax.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getDimension","page":"Model","title":"gmsh.model.getDimension","text":"gmsh.model.getDimension()\n\nGet the geometrical dimension of the current model.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.addDiscreteEntity","page":"Model","title":"gmsh.model.addDiscreteEntity","text":"gmsh.model.addDiscreteEntity(dim, tag = -1, boundary = Cint[])\n\nAdd a discrete model entity (defined by a mesh) of dimension dim in the current model. Return the tag of the new discrete entity, equal to tag if tag is positive, or a new tag if tag < 0. boundary specifies the tags of the entities on the boundary of the discrete entity, if any. Specifying boundary allows Gmsh to construct the topology of the overall model.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.removeEntities","page":"Model","title":"gmsh.model.removeEntities","text":"gmsh.model.removeEntities(dimTags, recursive = false)\n\nRemove the entities dimTags of the current model. If recursive is true, remove all the entities on their boundaries, down to dimension 0.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.removeEntityName","page":"Model","title":"gmsh.model.removeEntityName","text":"gmsh.model.removeEntityName(name)\n\nRemove the entity name name from the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getType","page":"Model","title":"gmsh.model.getType","text":"gmsh.model.getType(dim, tag)\n\nGet the type of the entity of dimension dim and tag tag.\n\nReturn entityType.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getParent","page":"Model","title":"gmsh.model.getParent","text":"gmsh.model.getParent(dim, tag)\n\nIn a partitioned model, get the parent of the entity of dimension dim and tag tag, i.e. from which the entity is a part of, if any. parentDim and parentTag are set to -1 if the entity has no parent.\n\nReturn parentDim, parentTag.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getPartitions","page":"Model","title":"gmsh.model.getPartitions","text":"gmsh.model.getPartitions(dim, tag)\n\nIn a partitioned model, return the tags of the partition(s) to which the entity belongs.\n\nReturn partitions.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getValue","page":"Model","title":"gmsh.model.getValue","text":"gmsh.model.getValue(dim, tag, parametricCoord)\n\nEvaluate the parametrization of the entity of dimension dim and tag tag at the parametric coordinates parametricCoord. Only valid for dim equal to 0 (with empty parametricCoord), 1 (with parametricCoord containing parametric coordinates on the curve) or 2 (with parametricCoord containing pairs of u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). Return triplets of x, y, z coordinates in coord, concatenated: [p1x, p1y, p1z, p2x, ...].\n\nReturn coord.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getDerivative","page":"Model","title":"gmsh.model.getDerivative","text":"gmsh.model.getDerivative(dim, tag, parametricCoord)\n\nEvaluate the derivative of the parametrization of the entity of dimension dim and tag tag at the parametric coordinates parametricCoord. Only valid for dim equal to 1 (with parametricCoord containing parametric coordinates on the curve) or 2 (with parametricCoord containing pairs of u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). For dim equal to 1 return the x, y, z components of the derivative with respect to u [d1ux, d1uy, d1uz, d2ux, ...]; for dim equal to 2 return the x, y, z components of the derivative with respect to u and v: [d1ux, d1uy, d1uz, d1vx, d1vy, d1vz, d2ux, ...].\n\nReturn derivatives.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getSecondDerivative","page":"Model","title":"gmsh.model.getSecondDerivative","text":"gmsh.model.getSecondDerivative(dim, tag, parametricCoord)\n\nEvaluate the second derivative of the parametrization of the entity of dimension dim and tag tag at the parametric coordinates parametricCoord. Only valid for dim equal to 1 (with parametricCoord containing parametric coordinates on the curve) or 2 (with parametricCoord containing pairs of u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]). For dim equal to 1 return the x, y, z components of the second derivative with respect to u [d1uux, d1uuy, d1uuz, d2uux, ...]; for dim equal to 2 return the x, y, z components of the second derivative with respect to u and v, and the mixed derivative with respect to u and v: [d1uux, d1uuy, d1uuz, d1vvx, d1vvy, d1vvz, d1uvx, d1uvy, d1uvz, d2uux, ...].\n\nReturn derivatives.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getCurvature","page":"Model","title":"gmsh.model.getCurvature","text":"gmsh.model.getCurvature(dim, tag, parametricCoord)\n\nEvaluate the (maximum) curvature of the entity of dimension dim and tag tag at the parametric coordinates parametricCoord. Only valid for dim equal to 1 (with parametricCoord containing parametric coordinates on the curve) or 2 (with parametricCoord containing pairs of u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]).\n\nReturn curvatures.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getPrincipalCurvatures","page":"Model","title":"gmsh.model.getPrincipalCurvatures","text":"gmsh.model.getPrincipalCurvatures(tag, parametricCoord)\n\nEvaluate the principal curvatures of the surface with tag tag at the parametric coordinates parametricCoord, as well as their respective directions. parametricCoord are given by pair of u and v coordinates, concatenated: [p1u, p1v, p2u, ...].\n\nReturn curvatureMax, curvatureMin, directionMax, directionMin.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getNormal","page":"Model","title":"gmsh.model.getNormal","text":"gmsh.model.getNormal(tag, parametricCoord)\n\nGet the normal to the surface with tag tag at the parametric coordinates parametricCoord. parametricCoord are given by pairs of u and v coordinates, concatenated: [p1u, p1v, p2u, ...]. normals are returned as triplets of x, y, z components, concatenated: [n1x, n1y, n1z, n2x, ...].\n\nReturn normals.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getParametrization","page":"Model","title":"gmsh.model.getParametrization","text":"gmsh.model.getParametrization(dim, tag, coord)\n\nGet the parametric coordinates parametricCoord for the points coord on the entity of dimension dim and tag tag. coord are given as triplets of x, y, z coordinates, concatenated: [p1x, p1y, p1z, p2x, ...]. parametricCoord returns the parametric coordinates t on the curve (if dim = 1) or pairs of u and v coordinates concatenated on the surface (if dim = 2), i.e. [p1t, p2t, ...] or [p1u, p1v, p2u, ...].\n\nReturn parametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getParametrizationBounds","page":"Model","title":"gmsh.model.getParametrizationBounds","text":"gmsh.model.getParametrizationBounds(dim, tag)\n\nGet the min and max bounds of the parametric coordinates for the entity of dimension dim and tag tag.\n\nReturn min, max.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.isInside","page":"Model","title":"gmsh.model.isInside","text":"gmsh.model.isInside(dim, tag, parametricCoord)\n\nCheck if the parametric coordinates provided in parametricCoord correspond to points inside the entitiy of dimension dim and tag tag, and return the number of points inside. This feature is only available for a subset of curves and surfaces, depending on the underyling geometrical representation.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getClosestPoint","page":"Model","title":"gmsh.model.getClosestPoint","text":"gmsh.model.getClosestPoint(dim, tag, coord)\n\nGet the points closestCoord on the entity of dimension dim and tag tag to the points coord, by orthogonal projection. coord and closestCoord are given as triplets of x, y, z coordinates, concatenated: [p1x, p1y, p1z, p2x, ...]. parametricCoord returns the parametric coordinates t on the curve (if dim = 1) or pairs of u and v coordinates concatenated on the surface (if dim = 2), i.e. [p1t, p2t, ...] or [p1u, p1v, p2u, ...].\n\nReturn closestCoord, parametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.reparametrizeOnSurface","page":"Model","title":"gmsh.model.reparametrizeOnSurface","text":"gmsh.model.reparametrizeOnSurface(dim, tag, parametricCoord, surfaceTag, which = 0)\n\nReparametrize the boundary entity (point or curve, i.e. with dim == 0 or dim == 1) of tag tag on the surface surfaceTag. If dim == 1, reparametrize all the points corresponding to the parametric coordinates parametricCoord. Multiple matches in case of periodic surfaces can be selected with which. This feature is only available for a subset of entities, depending on the underyling geometrical representation.\n\nReturn surfaceParametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setVisibility","page":"Model","title":"gmsh.model.setVisibility","text":"gmsh.model.setVisibility(dimTags, value, recursive = false)\n\nSet the visibility of the model entities dimTags to value. Apply the visibility setting recursively if recursive is true.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getVisibility","page":"Model","title":"gmsh.model.getVisibility","text":"gmsh.model.getVisibility(dim, tag)\n\nGet the visibility of the model entity of dimension dim and tag tag.\n\nReturn value.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setVisibilityPerWindow","page":"Model","title":"gmsh.model.setVisibilityPerWindow","text":"gmsh.model.setVisibilityPerWindow(value, windowIndex = 0)\n\nSet the global visibility of the model per window to value, where windowIndex identifies the window in the window list.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setColor","page":"Model","title":"gmsh.model.setColor","text":"gmsh.model.setColor(dimTags, r, g, b, a = 255, recursive = false)\n\nSet the color of the model entities dimTags to the RGBA value (r, g, b, a), where r, g, b and a should be integers between 0 and 255. Apply the color setting recursively if recursive is true.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.getColor","page":"Model","title":"gmsh.model.getColor","text":"gmsh.model.getColor(dim, tag)\n\nGet the color of the model entity of dimension dim and tag tag.\n\nReturn r, g, b, a.\n\n\n\n\n\n","category":"function"},{"location":"model/model/#gmsh.model.setCoordinates","page":"Model","title":"gmsh.model.setCoordinates","text":"gmsh.model.setCoordinates(tag, x, y, z)\n\nSet the x, y, z coordinates of a geometrical point.\n\n\n\n\n\n","category":"function"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"EditURL = \"<unknown>/src/literate/t16.jl\"","category":"page"},{"location":"examples/t16/#Tutorial-16","page":"Tutorial 16","title":"Tutorial 16","text":"","category":"section"},{"location":"examples/t16/#Constructive-Solid-Geometry,-OpenCASCADE-geometry-kernel","page":"Tutorial 16","title":"Constructive Solid Geometry, OpenCASCADE geometry kernel","text":"","category":"section"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Instead of constructing a model in a bottom-up fashion with Gmsh's built-in geometry kernel, starting with version 3 Gmsh allows you to directly use alternative geometry kernels. Here we will use the OpenCASCADE kernel.","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"import gmsh","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.initialize()","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.model.add(\"t16\")","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Let's build the same model as in `t5.py', but using constructive solid geometry. We first create two cubes:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.model.occ.addBox(0,0,0, 1,1,1, 1)\ngmsh.model.occ.addBox(0,0,0, 0.5,0.5,0.5, 2)","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"We apply a boolean difference to create the \"cube minus one eigth\" shape:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.model.occ.cut([(3,1)], [(3,2)], 3)","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Boolean operations with OpenCASCADE always create new entities. By default the extra arguments removeObject' andremoveTool' in cut()' are set toTrue', which will delete the original entities.","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"We then create the five spheres:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"x = 0; y = 0.75; z = 0; r = 0.09","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"holes = []\nfor t in 1:5\n    global x, z\n    x += 0.166\n    z += 0.166\n    gmsh.model.occ.addSphere(x,y,z,r, 3 + t)\n    t = (3, 3 + t)\n    push!(holes, t)\nend","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"If we had wanted five empty holes we would have used cut()' again. Here we want five spherical inclusions, whose mesh should be conformal with the mesh of the cube: we thus usefragment()', which intersects all volumes in a conformal manner (without creating duplicate interfaces):","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"ov = gmsh.model.occ.fragment([(3,3)], holes)\ngmsh.model.occ.synchronize()","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Creating entities using constructive solid geometry is very powerful, but can lead to practical issues for e.g. setting mesh sizes at points, or identifying boundaries.","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"To identify points or other bounding entities you can take advantage of the getEntities()',getBoundary()' and `getEntitiesInBoundingBox()' functions:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"lcar1 = .1\nlcar2 = .0005\nlcar3 = .055","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Assign a mesh size to all the points:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"ov = gmsh.model.getEntities(0);\ngmsh.model.mesh.setSize(ov, lcar1);\nnothing #hide","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Override this constraint on the points of the five spheres:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"ov = gmsh.model.getBoundary(holes, false, false, true);\ngmsh.model.mesh.setSize(ov, lcar3);\nnothing #hide","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"Select the corner point by searching for it geometrically:","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"eps = 1e-3\nov = gmsh.model.getEntitiesInBoundingBox(0.5-eps, 0.5-eps, 0.5-eps,\n                                         0.5+eps, 0.5+eps, 0.5+eps, 0)\ngmsh.model.mesh.setSize(ov, lcar2)","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.model.mesh.generate(3)","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.write(\"t16.msh\")","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"gmsh.finalize()","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"","category":"page"},{"location":"examples/t16/","page":"Tutorial 16","title":"Tutorial 16","text":"This page was generated using Literate.jl.","category":"page"},{"location":"geo/geometry/#Geometry-Description","page":"Geometry","title":"Geometry Description","text":"","category":"section"},{"location":"geo/geometry/","page":"Geometry","title":"Geometry","text":"gmsh.model.geo\ngmsh.model.geo.addPoint\ngmsh.model.geo.addLine\ngmsh.model.geo.addCircleArc\ngmsh.model.geo.addEllipseArc\ngmsh.model.geo.addSpline\ngmsh.model.geo.addBSpline\ngmsh.model.geo.addBezier\ngmsh.model.geo.addPolyline\ngmsh.model.geo.addCompoundSpline\ngmsh.model.geo.addCompoundBSpline\ngmsh.model.geo.addCurveLoop\ngmsh.model.geo.addCurveLoops\ngmsh.model.geo.addPlaneSurface\ngmsh.model.geo.addSurfaceFilling\ngmsh.model.geo.addSurfaceLoop\ngmsh.model.geo.addVolume\ngmsh.model.geo.extrude\ngmsh.model.geo.revolve\ngmsh.model.geo.twist\ngmsh.model.geo.extrudeBoundaryLayer\ngmsh.model.geo.translate\ngmsh.model.geo.rotate\ngmsh.model.geo.dilate\ngmsh.model.geo.mirror\ngmsh.model.geo.symmetrize\ngmsh.model.geo.copy\ngmsh.model.geo.remove\ngmsh.model.geo.removeAllDuplicates\ngmsh.model.geo.splitCurve\ngmsh.model.geo.getMaxTag\ngmsh.model.geo.setMaxTag\ngmsh.model.geo.addPhysicalGroup\ngmsh.model.geo.removePhysicalGroups\ngmsh.model.geo.synchronize","category":"page"},{"location":"geo/geometry/#gmsh.model.geo","page":"Geometry","title":"gmsh.model.geo","text":"module gmsh.model.geo\n\nBuilt-in CAD kernel functions\n\n\n\n\n\n","category":"module"},{"location":"geo/geometry/#gmsh.model.geo.addPoint","page":"Geometry","title":"gmsh.model.geo.addPoint","text":"gmsh.model.geo.addPoint(x, y, z, meshSize = 0., tag = -1)\n\nAdd a geometrical point in the built-in CAD representation, at coordinates (x, y, z). If meshSize is > 0, add a meshing constraint at that point. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the point. (Note that the point will be added in the current model only after synchronize is called. This behavior holds for all the entities added in the geo module.)\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addLine","page":"Geometry","title":"gmsh.model.geo.addLine","text":"gmsh.model.geo.addLine(startTag, endTag, tag = -1)\n\nAdd a straight line segment in the built-in CAD representation, between the two points with tags startTag and endTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the line.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addCircleArc","page":"Geometry","title":"gmsh.model.geo.addCircleArc","text":"gmsh.model.geo.addCircleArc(startTag, centerTag, endTag, tag = -1, nx = 0., ny = 0., nz = 0.)\n\nAdd a circle arc (strictly smaller than Pi) in the built-in CAD representation, between the two points with tags startTag and endTag, and with center centerTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If (nx, ny, nz) != (0, 0, 0), explicitly set the plane of the circle arc. Return the tag of the circle arc.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addEllipseArc","page":"Geometry","title":"gmsh.model.geo.addEllipseArc","text":"gmsh.model.geo.addEllipseArc(startTag, centerTag, majorTag, endTag, tag = -1, nx = 0., ny = 0., nz = 0.)\n\nAdd an ellipse arc (strictly smaller than Pi) in the built-in CAD representation, between the two points startTag and endTag, and with center centerTag and major axis point majorTag. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If (nx, ny, nz) != (0, 0, 0), explicitly set the plane of the circle arc. Return the tag of the ellipse arc.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addSpline","page":"Geometry","title":"gmsh.model.geo.addSpline","text":"gmsh.model.geo.addSpline(pointTags, tag = -1)\n\nAdd a spline (Catmull-Rom) curve in the built-in CAD representation, going through the points pointTags. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the spline curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addBSpline","page":"Geometry","title":"gmsh.model.geo.addBSpline","text":"gmsh.model.geo.addBSpline(pointTags, tag = -1)\n\nAdd a cubic b-spline curve in the built-in CAD representation, with pointTags control points. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Creates a periodic curve if the first and last points are the same. Return the tag of the b-spline curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addBezier","page":"Geometry","title":"gmsh.model.geo.addBezier","text":"gmsh.model.geo.addBezier(pointTags, tag = -1)\n\nAdd a Bezier curve in the built-in CAD representation, with pointTags control points. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically.  Return the tag of the Bezier curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addPolyline","page":"Geometry","title":"gmsh.model.geo.addPolyline","text":"gmsh.model.geo.addPolyline(pointTags, tag = -1)\n\nAdd a polyline curve in the built-in CAD representation, going through the points pointTags. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Create a periodic curve if the first and last points are the same. Return the tag of the polyline curve.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addCompoundSpline","page":"Geometry","title":"gmsh.model.geo.addCompoundSpline","text":"gmsh.model.geo.addCompoundSpline(curveTags, numIntervals = 5, tag = -1)\n\nAdd a spline (Catmull-Rom) curve in the built-in CAD representation, going through points sampling the curves in curveTags. The density of sampling points on each curve is governed by numIntervals. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the spline.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addCompoundBSpline","page":"Geometry","title":"gmsh.model.geo.addCompoundBSpline","text":"gmsh.model.geo.addCompoundBSpline(curveTags, numIntervals = 20, tag = -1)\n\nAdd a b-spline curve in the built-in CAD representation, with control points sampling the curves in curveTags. The density of sampling points on each curve is governed by numIntervals. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the b-spline.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addCurveLoop","page":"Geometry","title":"gmsh.model.geo.addCurveLoop","text":"gmsh.model.geo.addCurveLoop(curveTags, tag = -1, reorient = false)\n\nAdd a curve loop (a closed wire) in the built-in CAD representation, formed by the curves curveTags. curveTags should contain (signed) tags of model entities of dimension 1 forming a closed loop: a negative tag signifies that the underlying curve is considered with reversed orientation. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. If reorient is set, automatically reorient the curves if necessary. Return the tag of the curve loop.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addCurveLoops","page":"Geometry","title":"gmsh.model.geo.addCurveLoops","text":"gmsh.model.geo.addCurveLoops(curveTags)\n\nAdd curve loops in the built-in CAD representation based on the curves curveTags. Return the tags of found curve loops, if any.\n\nReturn tags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addPlaneSurface","page":"Geometry","title":"gmsh.model.geo.addPlaneSurface","text":"gmsh.model.geo.addPlaneSurface(wireTags, tag = -1)\n\nAdd a plane surface in the built-in CAD representation, defined by one or more curve loops wireTags. The first curve loop defines the exterior contour; additional curve loop define holes. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addSurfaceFilling","page":"Geometry","title":"gmsh.model.geo.addSurfaceFilling","text":"gmsh.model.geo.addSurfaceFilling(wireTags, tag = -1, sphereCenterTag = -1)\n\nAdd a surface in the built-in CAD representation, filling the curve loops in wireTags using transfinite interpolation. Currently only a single curve loop is supported; this curve loop should be composed by 3 or 4 curves only. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the surface.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addSurfaceLoop","page":"Geometry","title":"gmsh.model.geo.addSurfaceLoop","text":"gmsh.model.geo.addSurfaceLoop(surfaceTags, tag = -1)\n\nAdd a surface loop (a closed shell) formed by surfaceTags in the built-in CAD representation.  If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the shell.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addVolume","page":"Geometry","title":"gmsh.model.geo.addVolume","text":"gmsh.model.geo.addVolume(shellTags, tag = -1)\n\nAdd a volume (a region) in the built-in CAD representation, defined by one or more shells shellTags. The first surface loop defines the exterior boundary; additional surface loop define holes. If tag is positive, set the tag explicitly; otherwise a new tag is selected automatically. Return the tag of the volume.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.extrude","page":"Geometry","title":"gmsh.model.geo.extrude","text":"gmsh.model.geo.extrude(dimTags, dx, dy, dz, numElements = Cint[], heights = Cdouble[], recombine = false)\n\nExtrude the entities dimTags in the built-in CAD representation, using a translation along (dx, dy, dz). Return extruded entities in outDimTags. If numElements is not empty, also extrude the mesh: the entries in numElements give the number of elements in each layer. If height is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If recombine is set, recombine the mesh in the layers.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.revolve","page":"Geometry","title":"gmsh.model.geo.revolve","text":"gmsh.model.geo.revolve(dimTags, x, y, z, ax, ay, az, angle, numElements = Cint[], heights = Cdouble[], recombine = false)\n\nExtrude the entities dimTags in the built-in CAD representation, using a rotation of angle radians around the axis of revolution defined by the point (x, y, z) and the direction (ax, ay, az). The angle should be strictly smaller than Pi. Return extruded entities in outDimTags. If numElements is not empty, also extrude the mesh: the entries in numElements give the number of elements in each layer. If height is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If recombine is set, recombine the mesh in the layers.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.twist","page":"Geometry","title":"gmsh.model.geo.twist","text":"gmsh.model.geo.twist(dimTags, x, y, z, dx, dy, dz, ax, ay, az, angle, numElements = Cint[], heights = Cdouble[], recombine = false)\n\nExtrude the entities dimTags in the built-in CAD representation, using a combined translation and rotation of angle radians, along (dx, dy, dz) and around the axis of revolution defined by the point (x, y, z) and the direction (ax, ay, az). The angle should be strictly smaller than Pi. Return extruded entities in outDimTags. If numElements is not empty, also extrude the mesh: the entries in numElements give the number of elements in each layer. If height is not empty, it provides the (cumulative) height of the different layers, normalized to 1. If recombine is set, recombine the mesh in the layers.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.extrudeBoundaryLayer","page":"Geometry","title":"gmsh.model.geo.extrudeBoundaryLayer","text":"gmsh.model.geo.extrudeBoundaryLayer(dimTags, numElements = [1], heights = Cdouble[], recombine = false, second = false, viewIndex = -1)\n\nExtrude the entities dimTags in the built-in CAD representation along the normals of the mesh, creating discrete boundary layer entities. Return extruded entities in outDimTags. The entries in numElements give the number of elements in each layer. If height is not empty, it provides the height of the different layers. If recombine is set, recombine the mesh in the layers. A second boundary layer can be created from the same entities if second is set. If viewIndex is >= 0, use the corresponding view to either specify the normals (if the view contains a vector field) or scale the normals (if the view is scalar).\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.translate","page":"Geometry","title":"gmsh.model.geo.translate","text":"gmsh.model.geo.translate(dimTags, dx, dy, dz)\n\nTranslate the entities dimTags in the built-in CAD representation along (dx, dy, dz).\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.rotate","page":"Geometry","title":"gmsh.model.geo.rotate","text":"gmsh.model.geo.rotate(dimTags, x, y, z, ax, ay, az, angle)\n\nRotate the entities dimTags in the built-in CAD representation by angle radians around the axis of revolution defined by the point (x, y, z) and the direction (ax, ay, az).\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.dilate","page":"Geometry","title":"gmsh.model.geo.dilate","text":"gmsh.model.geo.dilate(dimTags, x, y, z, a, b, c)\n\nScale the entities dimTag in the built-in CAD representation by factors a, b and c along the three coordinate axes; use (x, y, z) as the center of the homothetic transformation.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.mirror","page":"Geometry","title":"gmsh.model.geo.mirror","text":"gmsh.model.geo.mirror(dimTags, a, b, c, d)\n\nMirror the entities dimTag in the built-in CAD representation, with respect to the plane of equation a * x + b * y + c * z + d = 0.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.symmetrize","page":"Geometry","title":"gmsh.model.geo.symmetrize","text":"gmsh.model.geo.symmetrize(dimTags, a, b, c, d)\n\nMirror the entities dimTag in the built-in CAD representation, with respect to the plane of equation a * x + b * y + c * z + d = 0. (This is a synonym for mirror, which will be deprecated in a future release.)\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.copy","page":"Geometry","title":"gmsh.model.geo.copy","text":"gmsh.model.geo.copy(dimTags)\n\nCopy the entities dimTags in the built-in CAD representation; the new entities are returned in outDimTags.\n\nReturn outDimTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.remove","page":"Geometry","title":"gmsh.model.geo.remove","text":"gmsh.model.geo.remove(dimTags, recursive = false)\n\nRemove the entities dimTags in the built-in CAD representation. If recursive is true, remove all the entities on their boundaries, down to dimension 0.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.removeAllDuplicates","page":"Geometry","title":"gmsh.model.geo.removeAllDuplicates","text":"gmsh.model.geo.removeAllDuplicates()\n\nRemove all duplicate entities in the built-in CAD representation (different entities at the same geometrical location).\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.splitCurve","page":"Geometry","title":"gmsh.model.geo.splitCurve","text":"gmsh.model.geo.splitCurve(tag, pointTags)\n\nSplit the curve of tag tag in the built-in CAD representation, on the control points pointTags. Return the tags curveTags of the newly created curves.\n\nReturn curveTags.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.getMaxTag","page":"Geometry","title":"gmsh.model.geo.getMaxTag","text":"gmsh.model.geo.getMaxTag(dim)\n\nGet the maximum tag of entities of dimension dim in the built-in CAD representation.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.setMaxTag","page":"Geometry","title":"gmsh.model.geo.setMaxTag","text":"gmsh.model.geo.setMaxTag(dim, maxTag)\n\nSet the maximum tag maxTag for entities of dimension dim in the built-in CAD representation.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.addPhysicalGroup","page":"Geometry","title":"gmsh.model.geo.addPhysicalGroup","text":"gmsh.model.geo.addPhysicalGroup(dim, tags, tag = -1)\n\nAdd a physical group of dimension dim, grouping the entities with tags tags in the built-in CAD representation. Return the tag of the physical group, equal to tag if tag is positive, or a new tag if tag < 0.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.removePhysicalGroups","page":"Geometry","title":"gmsh.model.geo.removePhysicalGroups","text":"gmsh.model.geo.removePhysicalGroups(dimTags = Tuple{Cint,Cint}[])\n\nRemove the physical groups dimTags from the built-in CAD representation. If dimTags is empty, remove all groups.\n\n\n\n\n\n","category":"function"},{"location":"geo/geometry/#gmsh.model.geo.synchronize","page":"Geometry","title":"gmsh.model.geo.synchronize","text":"gmsh.model.geo.synchronize()\n\nSynchronize the built-in CAD representation with the current Gmsh model. This can be called at any time, but since it involves a non trivial amount of processing, the number of synchronization points should normally be minimized. Without synchronization the entities in the built-in CAD representation are not available to any function outside of the built-in CAD kernel functions.\n\n\n\n\n\n","category":"function"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t1.jl\"","category":"page"},{"location":"examples/t1/#Tutorial-1","page":"Tutorial 1","title":"Tutorial 1","text":"","category":"section"},{"location":"examples/t1/#Geometry-basics,-elementary-entities,-physical-groups","page":"Tutorial 1","title":"Geometry basics, elementary entities, physical groups","text":"","category":"section"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"The Julia API is entirely defined in the gmsh.jl module (which contains the full documentation of all the functions in the API):","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"import gmsh","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Before using any functions in the Julia API, Gmsh must be initialized:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.initialize()","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Next we add a new model named \"t1\" (if gmsh.model.add() is not called a new unnamed model will be created on the fly, if necessary):","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.add(\"t1\")","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"The Julia API provides direct access to each supported geometry (CAD) kernel. The built-in kernel is used in this first tutorial: the corresponding API functions have the gmsh.model.geo prefix.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"The first type of elementary entity in Gmsh is a Point. To create a point with the built-in CAD kernel, the Julia API function is gmsh.model.geo.addPoint():","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"the first 3 arguments are the point coordinates (x, y, z)\nthe next (optional) argument is the target mesh size close to the point\nthe last (optional) argument is the point tag (a stricly positive integer that uniquely identifies the point)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"lc = 1e-2\ngmsh.model.geo.addPoint(0, 0, 0, lc, 1)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"The distribution of the mesh element sizes will be obtained by interpolation of these mesh sizes throughout the geometry. Another method to specify mesh sizes is to use general mesh size Fields (see t10.jl). If no target mesh size of provided, a default uniform coarse size will be used for the model, based on the overall model size.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"We can then define some additional points. All points should have different tags:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.geo.addPoint(.1, 0,  0, lc, 2)\ngmsh.model.geo.addPoint(.1, .3, 0, lc, 3)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"If the tag is not provided explicitly, a new tag is automatically created, and returned by the function:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"p4 = gmsh.model.geo.addPoint(0, .3, 0, lc)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Curves are Gmsh's second type of elementery entities, and, amongst curves, straight lines are the simplest. The API to create straight line segments with the built-in kernel follows the same conventions: the first 2 arguments are point tags (the start and end points of the line), and the last (optional one) is the line tag.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"In the commands below, for example, the line 1 starts at point 1 and ends at point 2.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Note that curve tags are separate from point tags - hence we can reuse tag 1 for our first curve. And as a general rule, elementary entity tags in Gmsh have to be unique per geometrical dimension.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.geo.addLine(1, 2, 1)\ngmsh.model.geo.addLine(3, 2, 2)\ngmsh.model.geo.addLine(3, 4, 3)\ngmsh.model.geo.addLine(4, 1, 4)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"The third elementary entity is the surface. In order to define a simple rectangular surface from the four curves defined above, a curve loop has first to be defined. A curve loop is defined by an ordered list of connected curves, a sign being associated with each curve (depending on the orientation of the curve to form a loop). The API function to create curve loops takes a list of integers as first argument, and the curve loop tag (which must be unique amongst curve loops) as the second (optional) argument:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.geo.addCurveLoop([4, 1, -2, 3], 1)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"We can then define the surface as a list of curve loops (only one here, representing the external contour, since there are no holes–see t4.jl for an example of a surface with a hole):","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.geo.addPlaneSurface([1], 1)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Before they can be meshed (and, more generally, before they can be used by API functions outside of the built-in CAD kernel functions), the CAD entities must be synchronized with the Gmsh model, which will create the relevant Gmsh data structures. This is achieved by the gmsh.model.geo.synchronize() API call for the built-in CAD kernel. Synchronizations can be called at any time, but they involve a non trivial amount of processing; so while you could synchronize the internal CAD data after every CAD command, it is usually better to minimize the number of synchronization points.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.geo.synchronize()","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"At this level, Gmsh knows everything to display the rectangular surface 1 and to mesh it. An optional step is needed if we want to group elementary geometrical entities into more meaningful groups, e.g. to define some mathematical (\"domain\", \"boundary\"), functional (\"left wing\", \"fuselage\") or material (\"steel\", \"carbon\") properties.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Such groups are called \"Physical Groups\" in Gmsh. By default, if physical groups are defined, Gmsh will export in output files only mesh elements that belong to at least one physical group. (To force Gmsh to save all elements, whether they belong to physical groups or not, set the `Mesh.SaveAll' option to 1.) Physical groups are also identified by tags, i.e. stricly positive integers, that should be unique per dimension (0D, 1D, 2D or 3D). Physical groups can also be given names.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Here we define a physical curve that groups the left, bottom and right curves in a single group (with prescribed tag 5); and a physical surface with name \"My surface\" (with an automatic tag) containing the geometrical surface 1:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.addPhysicalGroup(1, [1, 2, 4], 5)\nps = gmsh.model.addPhysicalGroup(2, [1])\ngmsh.model.setPhysicalName(2, ps, \"My surface\")","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"We can then generate a 2D mesh","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.mesh.generate(2)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"... and save it to disk","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.write(\"t1.msh\")","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Remember that by default, if physical groups are defined, Gmsh will export in the output mesh file only those elements that belong to at least one physical group. To force Gmsh to save all elements, you can use","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.option.setNumber(\"Mesh.SaveAll\", 1)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"By default, Gmsh saves meshes in the latest version of the Gmsh mesh file format (the MSH format). You can save meshes in other mesh formats by specifying a filename with a different extension. For example","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.write(\"t1.unv\")","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"will save the mesh in the UNV format. You can also save the mesh in older versions of the MSH format: simply set","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.option.setNumber(\"Mesh.MshFileVersion\", x)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"for any version number x. As an alternative, you can also not specify the format explicitly, and just choose a filename with the .msh2 or .msh4 extension.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Note that starting with Gmsh 3.0, models can be built using other geometry kernels than the default \"built-in\" kernel. To use the OpenCASCADE CAD kernel instead of the built-in kernel, you should use the functions with the gmsh.model.occ prefix.","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"Different CAD kernels have different features. With OpenCASCADE, instead of defining the surface by successively defining 4 points, 4 curves and 1 curve loop, one can define the rectangular surface directly with","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.occ.addRectangle(.2, 0, 0, .1, .3)","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"After synchronization with the Gmsh model with","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.model.occ.synchronize()","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"the underlying curves and points could be accessed with gmsh.model.getBoundary().","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"This should be called when you are done using the Gmsh Julia API:","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"gmsh.finalize()","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"","category":"page"},{"location":"examples/t1/","page":"Tutorial 1","title":"Tutorial 1","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t10.jl\"","category":"page"},{"location":"examples/t10/#Tutorial-10","page":"Tutorial 10","title":"Tutorial 10","text":"","category":"section"},{"location":"examples/t10/#Mesh-size-fields","page":"Tutorial 10","title":"Mesh size fields","text":"","category":"section"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"In addition to specifying target mesh sizes at the points of the geometry (see Tutorial 1) you can use general mesh size \"Fields\".","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"import gmsh","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.initialize(append!([\"gmsh\"], ARGS))","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.add(\"t10\")","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"Let's create a simple rectangular geometry:","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"lc = .15\ngmsh.model.geo.addPoint(0.0, 0.0, 0, lc, 1)\ngmsh.model.geo.addPoint(1, 0.0, 0, lc, 2)\ngmsh.model.geo.addPoint(1, 1, 0, lc, 3)\ngmsh.model.geo.addPoint(0, 1, 0, lc, 4)\ngmsh.model.geo.addPoint(0.2, .5, 0, lc, 5)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.geo.addLine(1, 2, 1)\ngmsh.model.geo.addLine(2, 3, 2)\ngmsh.model.geo.addLine(3, 4, 3)\ngmsh.model.geo.addLine(4, 1, 4)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.geo.addCurveLoop([1, 2, 3, 4], 5)\ngmsh.model.geo.addPlaneSurface([5], 6)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.geo.synchronize()","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"Say we would like to obtain mesh elements with size lc/30 near curve 2 and point 5, and size lc elsewhere. To achieve this, we can use two fields: \"Distance\", and \"Threshold\". We first define a Distance field (Field[1]) on points 5 and on curve 2. This field returns the distance to point 5 and to (100 equidistant points on) curve 2.","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"Distance\", 1)\ngmsh.model.mesh.field.setNumbers(1, \"NodesList\", [5])\ngmsh.model.mesh.field.setNumber(1, \"NNodesByEdge\", 100)\ngmsh.model.mesh.field.setNumbers(1, \"EdgesList\", [2])","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"We then define a Threshold field, which uses the return value of the `Distance' field 1 in order to define a simple change in element size depending on the computed distances","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"Threshold\", 2)\ngmsh.model.mesh.field.setNumber(2, \"IField\", 1)\ngmsh.model.mesh.field.setNumber(2, \"LcMin\", lc / 30)\ngmsh.model.mesh.field.setNumber(2, \"LcMax\", lc)\ngmsh.model.mesh.field.setNumber(2, \"DistMin\", 0.15)\ngmsh.model.mesh.field.setNumber(2, \"DistMax\", 0.5)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"Say we want to modulate the mesh element sizes using a mathematical function of the spatial coordinates. We can do this with the MathEval field:","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"MathEval\", 3)\ngmsh.model.mesh.field.setString(3, \"F\",\n                                \"Cos(4*3.14*x) * Sin(4*3.14*y) / 10 + 0.101\")","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"We could also combine MathEval with values coming from other fields. For example, let's define a Distance field around point 1","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"Distance\", 4)\ngmsh.model.mesh.field.setNumbers(4, \"NodesList\", [1])","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"We can then create a MathEval field with a function that depends on the return value of the Distance field 4, i.e., depending on the distance to point 1 (here using a cubic law, with minimum element size = lc / 100)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"MathEval\", 5)\ngmsh.model.mesh.field.setString(5, \"F\", \"F4^3 + \" * string(lc / 100))","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"We could also use a Box field to impose a step change in element sizes inside a box","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"Box\", 6)\ngmsh.model.mesh.field.setNumber(6, \"VIn\", lc / 15)\ngmsh.model.mesh.field.setNumber(6, \"VOut\", lc)\ngmsh.model.mesh.field.setNumber(6, \"XMin\", 0.3)\ngmsh.model.mesh.field.setNumber(6, \"XMax\", 0.6)\ngmsh.model.mesh.field.setNumber(6, \"YMin\", 0.3)\ngmsh.model.mesh.field.setNumber(6, \"YMax\", 0.6)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"Many other types of fields are available: see the reference manual for a complete list. You can also create fields directly in the graphical user interface by selecting Define->Size fields in the Mesh module.","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"Finally, let's use the minimum of all the fields as the background mesh field:","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.add(\"Min\", 7)\ngmsh.model.mesh.field.setNumbers(7, \"FieldsList\", [2, 3, 5, 6])","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.field.setAsBackgroundMesh(7)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"The API also allows to set a global mesh size callback, which is called each time the mesh size is queried","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"function meshSizeCallback(dim, tag, x, y, z)\n    return 0.02 * x + 0.01\nend\ngmsh.model.mesh.setSizeCallback(meshSizeCallback)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"To determine the size of mesh elements, Gmsh locally computes the minimum of","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"the size of the model bounding box;\nif Mesh.MeshSizeFromPoints is set, the mesh size specified at geometrical points;\nif Mesh.MeshSizeFromCurvature is set, the mesh size based on the curvature and Mesh.MinimumElementsPerTwoPi;\nthe background mesh field;\nany per-entity mesh size constraint;\nthe mesh size returned by the mesh size callback, if any.","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"This value is then constrained in the interval [Mesh.MeshSizeMin, Mesh.MeshSizeMax] and multiplied by Mesh.MeshSizeFactor.  In addition, boundary mesh sizes (on curves or surfaces) are interpolated inside the enclosed entity (surface or volume, respectively) if the option Mesh.MeshSizeExtendFromBoundary is set (which is the case by default).","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"When the element size is fully specified by a background mesh (as it is in this example), it is thus often desirable to set","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.option.setNumber(\"Mesh.MeshSizeExtendFromBoundary\", 0)\ngmsh.option.setNumber(\"Mesh.MeshSizeFromPoints\", 0)\ngmsh.option.setNumber(\"Mesh.MeshSizeFromCurvature\", 0)","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"This will prevent over-refinement due to small mesh sizes on the boundary.","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.model.mesh.generate(2)\ngmsh.write(\"t10.msh\")","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"gmsh.finalize()","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"","category":"page"},{"location":"examples/t10/","page":"Tutorial 10","title":"Tutorial 10","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"EditURL = \"https://github.com/koehlerson/gmsh.jl/blob/master/docs/src/literate/t3.jl\"","category":"page"},{"location":"examples/t3/#Tutorial-3","page":"Tutorial 3","title":"Tutorial 3","text":"","category":"section"},{"location":"examples/t3/#Extruded-meshes,-options","page":"Tutorial 3","title":"Extruded meshes, options","text":"","category":"section"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"import gmsh","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.initialize()","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.model.add(\"t3\")","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"Copied from tutorial 1:","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"lc = 1e-2\ngmsh.model.geo.addPoint(0, 0, 0, lc, 1)\ngmsh.model.geo.addPoint(.1, 0,  0, lc, 2)\ngmsh.model.geo.addPoint(.1, .3, 0, lc, 3)\ngmsh.model.geo.addPoint(0, .3, 0, lc, 4)\ngmsh.model.geo.addLine(1, 2, 1)\ngmsh.model.geo.addLine(3, 2, 2)\ngmsh.model.geo.addLine(3, 4, 3)\ngmsh.model.geo.addLine(4, 1, 4)\ngmsh.model.geo.addCurveLoop([4, 1, -2, 3], 1)\ngmsh.model.geo.addPlaneSurface([1], 1)\ngmsh.model.geo.synchronize()\ngmsh.model.addPhysicalGroup(0, [1, 2], 1)\ngmsh.model.addPhysicalGroup(1, [1, 2], 2)\ngmsh.model.addPhysicalGroup(2, [1], 6)\ngmsh.model.setPhysicalName(2, 6, \"My surface\")","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"As in Tutorial 2, we plan to perform an extrusion along the z axis.  But here, instead of only extruding the geometry, we also want to extrude the 2D mesh. This is done with the same extrude() function, but by specifying element 'Layers' (2 layers in this case, the first one with 8 subdivisions and the second one with 2 subdivisions, both with a height of h/2). The number of elements for each layer and the (end) height of each layer are specified in two vectors:","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"h = 0.1\nangle = 90.\nov = gmsh.model.geo.extrude([(2,1)], 0, 0, h, [8,2], [0.5,1])","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"The extrusion can also be performed with a rotation instead of a translation, and the resulting mesh can be recombined into prisms (we use only one layer here, with 7 subdivisions). All rotations are specified by an an axis point (-0.1, 0, 0.1), an axis direction (0, 1, 0), and a rotation angle (-Pi/2):","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"ov = gmsh.model.geo.revolve([(2,28)], -0.1,0,0.1, 0,1,0, -pi/2, [7])","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"Using the built-in geometry kernel, only rotations with angles < Pi are supported. To do a full turn, you will thus need to apply at least 3 rotations. The OpenCASCADE geometry kernel does not have this limitation.","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"A translation(-2*h, 0, 0) and a rotation((0,0.15,0.25), (1,0,0), Pi/2) can also be combined to form a \"twist\".  The last (optional) argument for the extrude() and twist() functions specifies whether the extruded mesh should be recombined or not.","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"ov = gmsh.model.geo.twist([(2,50)], 0,0.15,0.25, -2*h,0,0, 1,0,0,\n                          angle*pi/180., [10], [], true)","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.model.geo.synchronize()","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"All the extrusion functions return a vector of extruded entities: the \"top\" of the extruded surface (in ov[0]), the newly created volume (in ov[1]) and the tags of the lateral surfaces (in ov[2], ov[3], ...).","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"We can then define a new physical volume (with tag 101) to group all the elementary volumes:","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.model.addPhysicalGroup(3, [1, 2, ov[2][2]], 101)","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.model.mesh.generate(3)\ngmsh.write(\"t3.msh\")","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"gmsh.finalize()","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"","category":"page"},{"location":"examples/t3/","page":"Tutorial 3","title":"Tutorial 3","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model/mesh/#Mesh-Functions","page":"Meshing","title":"Mesh Functions","text":"","category":"section"},{"location":"model/mesh/","page":"Meshing","title":"Meshing","text":"gmsh.model.mesh.generate\ngmsh.model.mesh.partition\ngmsh.model.mesh.unpartition\ngmsh.model.mesh.optimize\ngmsh.model.mesh.recombine\ngmsh.model.mesh.refine\ngmsh.model.mesh.setOrder\ngmsh.model.mesh.getLastEntityError\ngmsh.model.mesh.getLastNodeError\ngmsh.model.mesh.clear\ngmsh.model.mesh.getNodes\ngmsh.model.mesh.getNodesByElementType\ngmsh.model.mesh.getNode\ngmsh.model.mesh.setNode\ngmsh.model.mesh.rebuildNodeCache\ngmsh.model.mesh.rebuildElementCache\ngmsh.model.mesh.getNodesForPhysicalGroup\ngmsh.model.mesh.addNodes\ngmsh.model.mesh.reclassifyNodes\ngmsh.model.mesh.relocateNodes\ngmsh.model.mesh.getElements\ngmsh.model.mesh.getElement\ngmsh.model.mesh.getElementByCoordinates\ngmsh.model.mesh.getElementsByCoordinates\ngmsh.model.mesh.getLocalCoordinatesInElement\ngmsh.model.mesh.getElementTypes\ngmsh.model.mesh.getElementType\ngmsh.model.mesh.getElementProperties\ngmsh.model.mesh.getElementsByType\ngmsh.model.mesh.addElements\ngmsh.model.mesh.addElementsByType\ngmsh.model.mesh.getIntegrationPoints\ngmsh.model.mesh.getJacobians\ngmsh.model.mesh.getJacobian\ngmsh.model.mesh.getBasisFunctions\ngmsh.model.mesh.getBasisFunctionsOrientationForElements\ngmsh.model.mesh.getBasisFunctionsOrientationForElement\ngmsh.model.mesh.getNumberOfOrientations\ngmsh.model.mesh.getEdgeNumber\ngmsh.model.mesh.getLocalMultipliersForHcurl0\ngmsh.model.mesh.getKeysForElements\ngmsh.model.mesh.getKeysForElement\ngmsh.model.mesh.getNumberOfKeysForElements\ngmsh.model.mesh.getInformationForElements\ngmsh.model.mesh.getBarycenters\ngmsh.model.mesh.getElementEdgeNodes\ngmsh.model.mesh.getElementFaceNodes\ngmsh.model.mesh.getGhostElements\ngmsh.model.mesh.setSize\ngmsh.model.mesh.setSizeAtParametricPoints\ngmsh.model.mesh.setSizeCallback\ngmsh.model.mesh.removeSizeCallback\ngmsh.model.mesh.setTransfiniteCurve\ngmsh.model.mesh.setTransfiniteSurface\ngmsh.model.mesh.setTransfiniteVolume\ngmsh.model.mesh.setTransfiniteAutomatic\ngmsh.model.mesh.setRecombine\ngmsh.model.mesh.setSmoothing\ngmsh.model.mesh.setReverse\ngmsh.model.mesh.setAlgorithm\ngmsh.model.mesh.setSizeFromBoundary\ngmsh.model.mesh.setCompound\ngmsh.model.mesh.setOutwardOrientation\ngmsh.model.mesh.embed\ngmsh.model.mesh.removeEmbedded\ngmsh.model.mesh.reorderElements\ngmsh.model.mesh.renumberNodes\ngmsh.model.mesh.renumberElements\ngmsh.model.mesh.setPeriodic\ngmsh.model.mesh.getPeriodicNodes\ngmsh.model.mesh.removeDuplicateNodes\ngmsh.model.mesh.splitQuadrangles\ngmsh.model.mesh.classifySurfaces\ngmsh.model.mesh.createGeometry\ngmsh.model.mesh.createTopology\ngmsh.model.mesh.computeHomology\ngmsh.model.mesh.computeCohomology\ngmsh.model.mesh.computeCrossField\ngmsh.model.mesh.triangulate\ngmsh.model.mesh.tetrahedralize","category":"page"},{"location":"model/mesh/#gmsh.model.mesh.generate","page":"Meshing","title":"gmsh.model.mesh.generate","text":"gmsh.model.mesh.generate(dim = 3)\n\nGenerate a mesh of the current model, up to dimension dim (0, 1, 2 or 3).\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.partition","page":"Meshing","title":"gmsh.model.mesh.partition","text":"gmsh.model.mesh.partition(numPart)\n\nPartition the mesh of the current model into numPart partitions.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.unpartition","page":"Meshing","title":"gmsh.model.mesh.unpartition","text":"gmsh.model.mesh.unpartition()\n\nUnpartition the mesh of the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.optimize","page":"Meshing","title":"gmsh.model.mesh.optimize","text":"gmsh.model.mesh.optimize(method, force = false, niter = 1, dimTags = Tuple{Cint,Cint}[])\n\nOptimize the mesh of the current model using method (empty for default tetrahedral mesh optimizer, \"Netgen\" for Netgen optimizer, \"HighOrder\" for direct high-order mesh optimizer, \"HighOrderElastic\" for high-order elastic smoother, \"HighOrderFastCurving\" for fast curving algorithm, \"Laplace2D\" for Laplace smoothing, \"Relocate2D\" and \"Relocate3D\" for node relocation). If force is set apply the optimization also to discrete entities. If dimTags is given, only apply the optimizer to the given entities.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.recombine","page":"Meshing","title":"gmsh.model.mesh.recombine","text":"gmsh.model.mesh.recombine()\n\nRecombine the mesh of the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.refine","page":"Meshing","title":"gmsh.model.mesh.refine","text":"gmsh.model.mesh.refine()\n\nRefine the mesh of the current model by uniformly splitting the elements.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setOrder","page":"Meshing","title":"gmsh.model.mesh.setOrder","text":"gmsh.model.mesh.setOrder(order)\n\nSet the order of the elements in the mesh of the current model to order.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getLastEntityError","page":"Meshing","title":"gmsh.model.mesh.getLastEntityError","text":"gmsh.model.mesh.getLastEntityError()\n\nGet the last entities (if any) where a meshing error occurred. Currently only populated by the new 3D meshing algorithms.\n\nReturn dimTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getLastNodeError","page":"Meshing","title":"gmsh.model.mesh.getLastNodeError","text":"gmsh.model.mesh.getLastNodeError()\n\nGet the last nodes (if any) where a meshing error occurred. Currently only populated by the new 3D meshing algorithms.\n\nReturn nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.clear","page":"Meshing","title":"gmsh.model.mesh.clear","text":"gmsh.model.mesh.clear(dimTags = Tuple{Cint,Cint}[])\n\nClear the mesh, i.e. delete all the nodes and elements, for the entities dimTags. if dimTags is empty, clear the whole mesh. Note that the mesh of an entity can only be cleared if this entity is not on the boundary of another entity with a non-empty mesh.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNodes","page":"Meshing","title":"gmsh.model.mesh.getNodes","text":"gmsh.model.mesh.getNodes(dim = -1, tag = -1, includeBoundary = false, returnParametricCoord = true)\n\nGet the nodes classified on the entity of dimension dim and tag tag. If tag < 0, get the nodes for all entities of dimension dim. If dim and tag are negative, get all the nodes in the mesh. nodeTags contains the node tags (their unique, strictly positive identification numbers). coord is a vector of length 3 times the length of nodeTags that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...]. If dim >= 0 and returnParamtricCoord is set, parametricCoord contains the parametric coordinates ([u1, u2, ...] or [u1, v1, u2, ...]) of the nodes, if available. The length of parametricCoord can be 0 or dim times the length of nodeTags. If includeBoundary is set, also return the nodes classified on the boundary of the entity (which will be reparametrized on the entity if dim >= 0 in order to compute their parametric coordinates).\n\nReturn nodeTags, coord, parametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNodesByElementType","page":"Meshing","title":"gmsh.model.mesh.getNodesByElementType","text":"gmsh.model.mesh.getNodesByElementType(elementType, tag = -1, returnParametricCoord = true)\n\nGet the nodes classified on the entity of tag tag, for all the elements of type elementType. The other arguments are treated as in getNodes.\n\nReturn nodeTags, coord, parametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNode","page":"Meshing","title":"gmsh.model.mesh.getNode","text":"gmsh.model.mesh.getNode(nodeTag)\n\nGet the coordinates and the parametric coordinates (if any) of the node with tag tag. This function relies on an internal cache (a vector in case of dense node numbering, a map otherwise); for large meshes accessing nodes in bulk is often preferable.\n\nReturn coord, parametricCoord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setNode","page":"Meshing","title":"gmsh.model.mesh.setNode","text":"gmsh.model.mesh.setNode(nodeTag, coord, parametricCoord)\n\nSet the coordinates and the parametric coordinates (if any) of the node with tag tag. This function relies on an internal cache (a vector in case of dense node numbering, a map otherwise); for large meshes accessing nodes in bulk is often preferable.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.rebuildNodeCache","page":"Meshing","title":"gmsh.model.mesh.rebuildNodeCache","text":"gmsh.model.mesh.rebuildNodeCache(onlyIfNecessary = true)\n\nRebuild the node cache.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.rebuildElementCache","page":"Meshing","title":"gmsh.model.mesh.rebuildElementCache","text":"gmsh.model.mesh.rebuildElementCache(onlyIfNecessary = true)\n\nRebuild the element cache.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNodesForPhysicalGroup","page":"Meshing","title":"gmsh.model.mesh.getNodesForPhysicalGroup","text":"gmsh.model.mesh.getNodesForPhysicalGroup(dim, tag)\n\nGet the nodes from all the elements belonging to the physical group of dimension dim and tag tag. nodeTags contains the node tags; coord is a vector of length 3 times the length of nodeTags that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...].\n\nReturn nodeTags, coord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.addNodes","page":"Meshing","title":"gmsh.model.mesh.addNodes","text":"gmsh.model.mesh.addNodes(dim, tag, nodeTags, coord, parametricCoord = Cdouble[])\n\nAdd nodes classified on the model entity of dimension dim and tag tag. nodeTags contains the node tags (their unique, strictly positive identification numbers). coord is a vector of length 3 times the length of nodeTags that contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z, n2x, ...]. The optional parametricCoord vector contains the parametric coordinates of the nodes, if any. The length of parametricCoord can be 0 or dim times the length of nodeTags. If the nodeTags vector is empty, new tags are automatically assigned to the nodes.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.reclassifyNodes","page":"Meshing","title":"gmsh.model.mesh.reclassifyNodes","text":"gmsh.model.mesh.reclassifyNodes()\n\nReclassify all nodes on their associated model entity, based on the elements. Can be used when importing nodes in bulk (e.g. by associating them all to a single volume), to reclassify them correctly on model surfaces, curves, etc. after the elements have been set.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.relocateNodes","page":"Meshing","title":"gmsh.model.mesh.relocateNodes","text":"gmsh.model.mesh.relocateNodes(dim = -1, tag = -1)\n\nRelocate the nodes classified on the entity of dimension dim and tag tag using their parametric coordinates. If tag < 0, relocate the nodes for all entities of dimension dim. If dim and tag are negative, relocate all the nodes in the mesh.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElements","page":"Meshing","title":"gmsh.model.mesh.getElements","text":"gmsh.model.mesh.getElements(dim = -1, tag = -1)\n\nGet the elements classified on the entity of dimension dim and tag tag. If tag < 0, get the elements for all entities of dimension dim. If dim and tag are negative, get all the elements in the mesh. elementTypes contains the MSH types of the elements (e.g. 2 for 3-node triangles: see getElementProperties to obtain the properties for a given element type). elementTags is a vector of the same length as elementTypes; each entry is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. nodeTags is also a vector of the same length as elementTypes; each entry is a vector of length equal to the number of elements of the given type times the number N of nodes for this type of element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...].\n\nReturn elementTypes, elementTags, nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElement","page":"Meshing","title":"gmsh.model.mesh.getElement","text":"gmsh.model.mesh.getElement(elementTag)\n\nGet the type and node tags of the element with tag tag. This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing elements in bulk is often preferable.\n\nReturn elementType, nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementByCoordinates","page":"Meshing","title":"gmsh.model.mesh.getElementByCoordinates","text":"gmsh.model.mesh.getElementByCoordinates(x, y, z, dim = -1, strict = false)\n\nSearch the mesh for an element located at coordinates (x, y, z). This function performs a search in a spatial octree. If an element is found, return its tag, type and node tags, as well as the local coordinates (u, v, w) within the reference element corresponding to search location. If dim is >= 0, only search for elements of the given dimension. If strict is not set, use a tolerance to find elements near the search location.\n\nReturn elementTag, elementType, nodeTags, u, v, w.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementsByCoordinates","page":"Meshing","title":"gmsh.model.mesh.getElementsByCoordinates","text":"gmsh.model.mesh.getElementsByCoordinates(x, y, z, dim = -1, strict = false)\n\nSearch the mesh for element(s) located at coordinates (x, y, z). This function performs a search in a spatial octree. Return the tags of all found elements in elementTags. Additional information about the elements can be accessed through getElement and getLocalCoordinatesInElement. If dim is >= 0, only search for elements of the given dimension. If strict is not set, use a tolerance to find elements near the search location.\n\nReturn elementTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getLocalCoordinatesInElement","page":"Meshing","title":"gmsh.model.mesh.getLocalCoordinatesInElement","text":"gmsh.model.mesh.getLocalCoordinatesInElement(elementTag, x, y, z)\n\nReturn the local coordinates (u, v, w) within the element elementTag corresponding to the model coordinates (x, y, z). This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing elements in bulk is often preferable.\n\nReturn u, v, w.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementTypes","page":"Meshing","title":"gmsh.model.mesh.getElementTypes","text":"gmsh.model.mesh.getElementTypes(dim = -1, tag = -1)\n\nGet the types of elements in the entity of dimension dim and tag tag. If tag < 0, get the types for all entities of dimension dim. If dim and tag are negative, get all the types in the mesh.\n\nReturn elementTypes.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementType","page":"Meshing","title":"gmsh.model.mesh.getElementType","text":"gmsh.model.mesh.getElementType(familyName, order, serendip = false)\n\nReturn an element type given its family name familyName (\"Point\", \"Line\", \"Triangle\", \"Quadrangle\", \"Tetrahedron\", \"Pyramid\", \"Prism\", \"Hexahedron\") and polynomial order order. If serendip is true, return the corresponding serendip element type (element without interior nodes).\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementProperties","page":"Meshing","title":"gmsh.model.mesh.getElementProperties","text":"gmsh.model.mesh.getElementProperties(elementType)\n\nGet the properties of an element of type elementType: its name (elementName), dimension (dim), order (order), number of nodes (numNodes), local coordinates of the nodes in the reference element (localNodeCoord vector, of length dim times numNodes) and number of primary (first order) nodes (numPrimaryNodes).\n\nReturn elementName, dim, order, numNodes, localNodeCoord, numPrimaryNodes.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementsByType","page":"Meshing","title":"gmsh.model.mesh.getElementsByType","text":"gmsh.model.mesh.getElementsByType(elementType, tag = -1, task = 0, numTasks = 1)\n\nGet the elements of type elementType classified on the entity of tag tag. If tag < 0, get the elements for all entities. elementTags is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. nodeTags is a vector of length equal to the number of elements of the given type times the number N of nodes for this type of element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...]. If numTasks > 1, only compute and return the part of the data indexed by task.\n\nReturn elementTags, nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.addElements","page":"Meshing","title":"gmsh.model.mesh.addElements","text":"gmsh.model.mesh.addElements(dim, tag, elementTypes, elementTags, nodeTags)\n\nAdd elements classified on the entity of dimension dim and tag tag. types contains the MSH types of the elements (e.g. 2 for 3-node triangles: see the Gmsh reference manual). elementTags is a vector of the same length as types; each entry is a vector containing the tags (unique, strictly positive identifiers) of the elements of the corresponding type. nodeTags is also a vector of the same length as types; each entry is a vector of length equal to the number of elements of the given type times the number N of nodes per element, that contains the node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...].\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.addElementsByType","page":"Meshing","title":"gmsh.model.mesh.addElementsByType","text":"gmsh.model.mesh.addElementsByType(tag, elementType, elementTags, nodeTags)\n\nAdd elements of type elementType classified on the entity of tag tag. elementTags contains the tags (unique, strictly positive identifiers) of the elements of the corresponding type. nodeTags is a vector of length equal to the number of elements times the number N of nodes per element, that contains the node tags of all the elements, concatenated: [e1n1, e1n2, ..., e1nN, e2n1, ...]. If the elementTag vector is empty, new tags are automatically assigned to the elements.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getIntegrationPoints","page":"Meshing","title":"gmsh.model.mesh.getIntegrationPoints","text":"gmsh.model.mesh.getIntegrationPoints(elementType, integrationType)\n\nGet the numerical quadrature information for the given element type elementType and integration rule integrationType (e.g. \"Gauss4\" for a Gauss quadrature suited for integrating 4th order polynomials). localCoord contains the u, v, w coordinates of the G integration points in the reference element: [g1u, g1v, g1w, ..., gGu, gGv, gGw]. weights contains the associated weights: [g1q, ..., gGq].\n\nReturn localCoord, weights.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getJacobians","page":"Meshing","title":"gmsh.model.mesh.getJacobians","text":"gmsh.model.mesh.getJacobians(elementType, localCoord, tag = -1, task = 0, numTasks = 1)\n\nGet the Jacobians of all the elements of type elementType classified on the entity of tag tag, at the G evaluation points localCoord given as concatenated triplets of coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]. Data is returned by element, with elements in the same order as in getElements and getElementsByType. jacobians contains for each element the 9 entries of the 3x3 Jacobian matrix at each evaluation point. The matrix is returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu, e1g1Jxv, ..., e1g1Jzw, e1g2Jxu, ..., e1gGJzw, e2g1Jxu, ...], with Jxu=dx/du, Jyu=dy/du, etc. determinants contains for each element the determinant of the Jacobian matrix at each evaluation point: [e1g1, e1g2, ... e1gG, e2g1, ...]. coord contains for each element the x, y, z coordinates of the evaluation points. If tag < 0, get the Jacobian data for all entities. If numTasks > 1, only compute and return the part of the data indexed by task.\n\nReturn jacobians, determinants, coord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getJacobian","page":"Meshing","title":"gmsh.model.mesh.getJacobian","text":"gmsh.model.mesh.getJacobian(elementTag, localCoord)\n\nGet the Jacobian for a single element elementTag, at the G evaluation points localCoord given as concatenated triplets of coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]. jacobians contains the 9 entries of the 3x3 Jacobian matrix at each evaluation point. The matrix is returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu, e1g1Jxv, ..., e1g1Jzw, e1g2Jxu, ..., e1gGJzw, e2g1Jxu, ...], with Jxu=dx/du, Jyu=dy/du, etc. determinants contains the determinant of the Jacobian matrix at each evaluation point. coord contains the x, y, z coordinates of the evaluation points. This function relies on an internal cache (a vector in case of dense element numbering, a map otherwise); for large meshes accessing Jacobians in bulk is often preferable.\n\nReturn jacobians, determinants, coord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getBasisFunctions","page":"Meshing","title":"gmsh.model.mesh.getBasisFunctions","text":"gmsh.model.mesh.getBasisFunctions(elementType, localCoord, functionSpaceType, wantedOrientations = Cint[])\n\nGet the basis functions of the element of type elementType at the evaluation points localCoord (given as concatenated triplets of coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]), for the function space functionSpaceType (e.g. \"Lagrange\" or \"GradLagrange\" for Lagrange basis functions or their gradient, in the u, v, w coordinates of the reference element; or \"H1Legendre3\" or \"GradH1Legendre3\" for 3rd order hierarchical H1 Legendre functions). numComponents returns the number C of components of a basis function. basisFunctions returns the value of the N basis functions at the evaluation points, i.e. [g1f1, g1f2, ..., g1fN, g2f1, ...] when C == 1 or [g1f1u, g1f1v, g1f1w, g1f2u, ..., g1fNw, g2f1u, ...] when C == 3. For basis functions that depend on the orientation of the elements, all values for the first orientation are returned first, followed by values for the second, etc. numOrientations returns the overall number of orientations. If wantedOrientations is not empty, only return the values for the desired orientation indices.\n\nReturn numComponents, basisFunctions, numOrientations.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getBasisFunctionsOrientationForElements","page":"Meshing","title":"gmsh.model.mesh.getBasisFunctionsOrientationForElements","text":"gmsh.model.mesh.getBasisFunctionsOrientationForElements(elementType, functionSpaceType, tag = -1, task = 0, numTasks = 1)\n\nGet the orientation index of the elements of type elementType in the entity of tag tag. The arguments have the same meaning as in getBasisFunctions. basisFunctionsOrientation is a vector giving for each element the orientation index in the values returned by getBasisFunctions. For Lagrange basis functions the call is superfluous as it will return a vector of zeros.\n\nReturn basisFunctionsOrientation.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getBasisFunctionsOrientationForElement","page":"Meshing","title":"gmsh.model.mesh.getBasisFunctionsOrientationForElement","text":"gmsh.model.mesh.getBasisFunctionsOrientationForElement(elementTag, functionSpaceType)\n\nGet the orientation of a single element elementTag.\n\nReturn basisFunctionsOrientation.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNumberOfOrientations","page":"Meshing","title":"gmsh.model.mesh.getNumberOfOrientations","text":"gmsh.model.mesh.getNumberOfOrientations(elementType, functionSpaceType)\n\nGet the number of possible orientations for elements of type elementType and function space named functionSpaceType.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getEdgeNumber","page":"Meshing","title":"gmsh.model.mesh.getEdgeNumber","text":"gmsh.model.mesh.getEdgeNumber(edgeNodes)\n\nGet the global edge identifier edgeNum for an input list of node pairs, concatenated in the vector edgeNodes.  Warning: this is an experimental feature and will probably change in a future release.\n\nReturn edgeNum.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getLocalMultipliersForHcurl0","page":"Meshing","title":"gmsh.model.mesh.getLocalMultipliersForHcurl0","text":"gmsh.model.mesh.getLocalMultipliersForHcurl0(elementType, tag = -1)\n\nGet the local multipliers (to guarantee H(curl)-conformity) of the order 0 H(curl) basis functions. Warning: this is an experimental feature and will probably change in a future release.\n\nReturn localMultipliers.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getKeysForElements","page":"Meshing","title":"gmsh.model.mesh.getKeysForElements","text":"gmsh.model.mesh.getKeysForElements(elementType, functionSpaceType, tag = -1, returnCoord = true)\n\nGenerate the keys for the elements of type elementType in the entity of tag tag, for the functionSpaceType function space. Each key uniquely identifies a basis function in the function space. If returnCoord is set, the coord vector contains the x, y, z coordinates locating basis functions for sorting purposes. Warning: this is an experimental feature and will probably change in a future release.\n\nReturn keys, coord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getKeysForElement","page":"Meshing","title":"gmsh.model.mesh.getKeysForElement","text":"gmsh.model.mesh.getKeysForElement(elementTag, functionSpaceType, returnCoord = true)\n\nGet the keys for a single element elementTag.\n\nReturn keys, coord.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getNumberOfKeysForElements","page":"Meshing","title":"gmsh.model.mesh.getNumberOfKeysForElements","text":"gmsh.model.mesh.getNumberOfKeysForElements(elementType, functionSpaceType)\n\nGet the number of keys by elements of type elementType for function space named functionSpaceType.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getInformationForElements","page":"Meshing","title":"gmsh.model.mesh.getInformationForElements","text":"gmsh.model.mesh.getInformationForElements(keys, elementType, functionSpaceType)\n\nGet information about the keys. infoKeys returns information about the functions associated with the keys. infoKeys[0].first describes the type of function (0 for  vertex function, 1 for edge function, 2 for face function and 3 for bubble function). infoKeys[0].second gives the order of the function associated with the key. Warning: this is an experimental feature and will probably change in a future release.\n\nReturn infoKeys.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getBarycenters","page":"Meshing","title":"gmsh.model.mesh.getBarycenters","text":"gmsh.model.mesh.getBarycenters(elementType, tag, fast, primary, task = 0, numTasks = 1)\n\nGet the barycenters of all elements of type elementType classified on the entity of tag tag. If primary is set, only the primary nodes of the elements are taken into account for the barycenter calculation. If fast is set, the function returns the sum of the primary node coordinates (without normalizing by the number of nodes). If tag < 0, get the barycenters for all entities. If numTasks > 1, only compute and return the part of the data indexed by task.\n\nReturn barycenters.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementEdgeNodes","page":"Meshing","title":"gmsh.model.mesh.getElementEdgeNodes","text":"gmsh.model.mesh.getElementEdgeNodes(elementType, tag = -1, primary = false, task = 0, numTasks = 1)\n\nGet the nodes on the edges of all elements of type elementType classified on the entity of tag tag. nodeTags contains the node tags of the edges for all the elements: [e1a1n1, e1a1n2, e1a2n1, ...]. Data is returned by element, with elements in the same order as in getElements and getElementsByType. If primary is set, only the primary (begin/end) nodes of the edges are returned. If tag < 0, get the edge nodes for all entities. If numTasks > 1, only compute and return the part of the data indexed by task.\n\nReturn nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getElementFaceNodes","page":"Meshing","title":"gmsh.model.mesh.getElementFaceNodes","text":"gmsh.model.mesh.getElementFaceNodes(elementType, faceType, tag = -1, primary = false, task = 0, numTasks = 1)\n\nGet the nodes on the faces of type faceType (3 for triangular faces, 4 for quadrangular faces) of all elements of type elementType classified on the entity of tag tag. nodeTags contains the node tags of the faces for all elements: [e1f1n1, ..., e1f1nFaceType, e1f2n1, ...]. Data is returned by element, with elements in the same order as in getElements and getElementsByType. If primary is set, only the primary (corner) nodes of the faces are returned. If tag < 0, get the face nodes for all entities. If numTasks > 1, only compute and return the part of the data indexed by task.\n\nReturn nodeTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getGhostElements","page":"Meshing","title":"gmsh.model.mesh.getGhostElements","text":"gmsh.model.mesh.getGhostElements(dim, tag)\n\nGet the ghost elements elementTags and their associated partitions stored in the ghost entity of dimension dim and tag tag.\n\nReturn elementTags, partitions.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setSize","page":"Meshing","title":"gmsh.model.mesh.setSize","text":"gmsh.model.mesh.setSize(dimTags, size)\n\nSet a mesh size constraint on the model entities dimTags. Currently only entities of dimension 0 (points) are handled.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setSizeAtParametricPoints","page":"Meshing","title":"gmsh.model.mesh.setSizeAtParametricPoints","text":"gmsh.model.mesh.setSizeAtParametricPoints(dim, tag, parametricCoord, sizes)\n\nSet mesh size constraints at the given parametric points parametricCoord on the model entity of dimension dim and tag tag. Currently only entities of dimension 1 (lines) are handled.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setSizeCallback","page":"Meshing","title":"gmsh.model.mesh.setSizeCallback","text":"gmsh.model.mesh.setSizeCallback(callback)\n\nSet a global mesh size callback. The callback should take 5 arguments (dim, tag, x, y and z) and return the value of the mesh size at coordinates (x, y, z).\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.removeSizeCallback","page":"Meshing","title":"gmsh.model.mesh.removeSizeCallback","text":"gmsh.model.mesh.removeSizeCallback()\n\nRemove the global mesh size callback.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setTransfiniteCurve","page":"Meshing","title":"gmsh.model.mesh.setTransfiniteCurve","text":"gmsh.model.mesh.setTransfiniteCurve(tag, numNodes, meshType = \"Progression\", coef = 1.)\n\nSet a transfinite meshing constraint on the curve tag, with numNodes nodes distributed according to meshType and coef. Currently supported types are \"Progression\" (geometrical progression with power coef), \"Bump\" (refinement toward both extremities of the curve) and \"Beta\" (beta law).\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setTransfiniteSurface","page":"Meshing","title":"gmsh.model.mesh.setTransfiniteSurface","text":"gmsh.model.mesh.setTransfiniteSurface(tag, arrangement = \"Left\", cornerTags = Cint[])\n\nSet a transfinite meshing constraint on the surface tag. arrangement describes the arrangement of the triangles when the surface is not flagged as recombined: currently supported values are \"Left\", \"Right\", \"AlternateLeft\" and \"AlternateRight\". cornerTags can be used to specify the (3 or 4) corners of the transfinite interpolation explicitly; specifying the corners explicitly is mandatory if the surface has more that 3 or 4 points on its boundary.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setTransfiniteVolume","page":"Meshing","title":"gmsh.model.mesh.setTransfiniteVolume","text":"gmsh.model.mesh.setTransfiniteVolume(tag, cornerTags = Cint[])\n\nSet a transfinite meshing constraint on the surface tag. cornerTags can be used to specify the (6 or 8) corners of the transfinite interpolation explicitly.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setTransfiniteAutomatic","page":"Meshing","title":"gmsh.model.mesh.setTransfiniteAutomatic","text":"gmsh.model.mesh.setTransfiniteAutomatic(dimTags = Tuple{Cint,Cint}[], cornerAngle = 2.35, recombine = true)\n\nSet transfinite meshing constraints on the model entities in dimTag. Transfinite meshing constraints are added to the curves of the quadrangular surfaces and to the faces of 6-sided volumes. Quadragular faces with a corner angle superior to cornerAngle (in radians) are ignored. The number of points is automatically determined from the sizing constraints. If dimTag is empty, the constraints are applied to all entities in the model. If recombine is true, the recombine flag is automatically set on the transfinite surfaces.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setRecombine","page":"Meshing","title":"gmsh.model.mesh.setRecombine","text":"gmsh.model.mesh.setRecombine(dim, tag)\n\nSet a recombination meshing constraint on the model entity of dimension dim and tag tag. Currently only entities of dimension 2 (to recombine triangles into quadrangles) are supported.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setSmoothing","page":"Meshing","title":"gmsh.model.mesh.setSmoothing","text":"gmsh.model.mesh.setSmoothing(dim, tag, val)\n\nSet a smoothing meshing constraint on the model entity of dimension dim and tag tag. val iterations of a Laplace smoother are applied.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setReverse","page":"Meshing","title":"gmsh.model.mesh.setReverse","text":"gmsh.model.mesh.setReverse(dim, tag, val = true)\n\nSet a reverse meshing constraint on the model entity of dimension dim and tag tag. If val is true, the mesh orientation will be reversed with respect to the natural mesh orientation (i.e. the orientation consistent with the orientation of the geometry). If val is false, the mesh is left as-is.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setAlgorithm","page":"Meshing","title":"gmsh.model.mesh.setAlgorithm","text":"gmsh.model.mesh.setAlgorithm(dim, tag, val)\n\nSet the meshing algorithm on the model entity of dimension dim and tag tag. Currently only supported for dim == 2.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setSizeFromBoundary","page":"Meshing","title":"gmsh.model.mesh.setSizeFromBoundary","text":"gmsh.model.mesh.setSizeFromBoundary(dim, tag, val)\n\nForce the mesh size to be extended from the boundary, or not, for the model entity of dimension dim and tag tag. Currently only supported for dim ==\n\n\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setCompound","page":"Meshing","title":"gmsh.model.mesh.setCompound","text":"gmsh.model.mesh.setCompound(dim, tags)\n\nSet a compound meshing constraint on the model entities of dimension dim and tags tags. During meshing, compound entities are treated as a single discrete entity, which is automatically reparametrized.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setOutwardOrientation","page":"Meshing","title":"gmsh.model.mesh.setOutwardOrientation","text":"gmsh.model.mesh.setOutwardOrientation(tag)\n\nSet meshing constraints on the bounding surfaces of the volume of tag tag so that all surfaces are oriented with outward pointing normals. Currently only available with the OpenCASCADE kernel, as it relies on the STL triangulation.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.embed","page":"Meshing","title":"gmsh.model.mesh.embed","text":"gmsh.model.mesh.embed(dim, tags, inDim, inTag)\n\nEmbed the model entities of dimension dim and tags tags in the (inDim, inTag) model entity. The dimension dim can 0, 1 or 2 and must be strictly smaller than inDim, which must be either 2 or 3. The embedded entities should not be part of the boundary of the entity inTag, whose mesh will conform to the mesh of the embedded entities.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.removeEmbedded","page":"Meshing","title":"gmsh.model.mesh.removeEmbedded","text":"gmsh.model.mesh.removeEmbedded(dimTags, dim = -1)\n\nRemove embedded entities from the model entities dimTags. if dim is >= 0, only remove embedded entities of the given dimension (e.g. embedded points if dim == 0).\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.reorderElements","page":"Meshing","title":"gmsh.model.mesh.reorderElements","text":"gmsh.model.mesh.reorderElements(elementType, tag, ordering)\n\nReorder the elements of type elementType classified on the entity of tag tag according to ordering.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.renumberNodes","page":"Meshing","title":"gmsh.model.mesh.renumberNodes","text":"gmsh.model.mesh.renumberNodes()\n\nRenumber the node tags in a continuous sequence.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.renumberElements","page":"Meshing","title":"gmsh.model.mesh.renumberElements","text":"gmsh.model.mesh.renumberElements()\n\nRenumber the element tags in a continuous sequence.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.setPeriodic","page":"Meshing","title":"gmsh.model.mesh.setPeriodic","text":"gmsh.model.mesh.setPeriodic(dim, tags, tagsMaster, affineTransform)\n\nSet the meshes of the entities of dimension dim and tag tags as periodic copies of the meshes of entities tagsMaster, using the affine transformation specified in affineTransformation (16 entries of a 4x4 matrix, by row). If used after meshing, generate the periodic node correspondence information assuming the meshes of entities tags effectively match the meshes of entities tagsMaster (useful for structured and extruded meshes). Currently only available for @code{dim} == 1 and @code{dim} == 2.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.getPeriodicNodes","page":"Meshing","title":"gmsh.model.mesh.getPeriodicNodes","text":"gmsh.model.mesh.getPeriodicNodes(dim, tag, includeHighOrderNodes = false)\n\nGet the master entity tagMaster, the node tags nodeTags and their corresponding master node tags nodeTagsMaster, and the affine transform affineTransform for the entity of dimension dim and tag tag. If includeHighOrderNodes is set, include high-order nodes in the returned data.\n\nReturn tagMaster, nodeTags, nodeTagsMaster, affineTransform.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.removeDuplicateNodes","page":"Meshing","title":"gmsh.model.mesh.removeDuplicateNodes","text":"gmsh.model.mesh.removeDuplicateNodes()\n\nRemove duplicate nodes in the mesh of the current model.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.splitQuadrangles","page":"Meshing","title":"gmsh.model.mesh.splitQuadrangles","text":"gmsh.model.mesh.splitQuadrangles(quality = 1., tag = -1)\n\nSplit (into two triangles) all quadrangles in surface tag whose quality is lower than quality. If tag < 0, split quadrangles in all surfaces.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.classifySurfaces","page":"Meshing","title":"gmsh.model.mesh.classifySurfaces","text":"gmsh.model.mesh.classifySurfaces(angle, boundary = true, forReparametrization = false, curveAngle = pi, exportDiscrete = true)\n\nClassify (\"color\") the surface mesh based on the angle threshold angle (in radians), and create new discrete surfaces, curves and points accordingly. If boundary is set, also create discrete curves on the boundary if the surface is open. If forReparametrization is set, create edges and surfaces that can be reparametrized using a single map. If curveAngle is less than Pi, also force curves to be split according to curveAngle. If exportDiscrete is set, clear any built-in CAD kernel entities and export the discrete entities in the built- in CAD kernel.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.createGeometry","page":"Meshing","title":"gmsh.model.mesh.createGeometry","text":"gmsh.model.mesh.createGeometry(dimTags = Tuple{Cint,Cint}[])\n\nCreate a geometry for the discrete entities dimTags (represented solely by a mesh, without an underlying CAD description), i.e. create a parametrization for discrete curves and surfaces, assuming that each can be parametrized with a single map. If dimTags is empty, create a geometry for all the discrete entities.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.createTopology","page":"Meshing","title":"gmsh.model.mesh.createTopology","text":"gmsh.model.mesh.createTopology(makeSimplyConnected = true, exportDiscrete = true)\n\nCreate a boundary representation from the mesh if the model does not have one (e.g. when imported from mesh file formats with no BRep representation of the underlying model). If makeSimplyConnected is set, enforce simply connected discrete surfaces and volumes. If exportDiscrete is set, clear any built-in CAD kernel entities and export the discrete entities in the built-in CAD kernel.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.computeHomology","page":"Meshing","title":"gmsh.model.mesh.computeHomology","text":"gmsh.model.mesh.computeHomology(domainTags = Cint[], subdomainTags = Cint[], dims = Cint[])\n\nCompute a basis representation for homology spaces after a mesh has been generated. The computation domain is given in a list of physical group tags domainTags; if empty, the whole mesh is the domain. The computation subdomain for relative homology computation is given in a list of physical group tags subdomainTags; if empty, absolute homology is computed. The dimensions homology bases to be computed are given in the list dim; if empty, all bases are computed. Resulting basis representation chains are stored as physical groups in the mesh.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.computeCohomology","page":"Meshing","title":"gmsh.model.mesh.computeCohomology","text":"gmsh.model.mesh.computeCohomology(domainTags = Cint[], subdomainTags = Cint[], dims = Cint[])\n\nCompute a basis representation for cohomology spaces after a mesh has been generated. The computation domain is given in a list of physical group tags domainTags; if empty, the whole mesh is the domain. The computation subdomain for relative cohomology computation is given in a list of physical group tags subdomainTags; if empty, absolute cohomology is computed. The dimensions homology bases to be computed are given in the list dim; if empty, all bases are computed. Resulting basis representation cochains are stored as physical groups in the mesh.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.computeCrossField","page":"Meshing","title":"gmsh.model.mesh.computeCrossField","text":"gmsh.model.mesh.computeCrossField()\n\nCompute a cross field for the current mesh. The function creates 3 views: the H function, the Theta function and cross directions. Return the tags of the views.\n\nReturn viewTags.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.triangulate","page":"Meshing","title":"gmsh.model.mesh.triangulate","text":"gmsh.model.mesh.triangulate(coord)\n\nTriangulate the points given in the coord vector as pairs of u, v coordinates, and return the node tags (with numbering starting at 1) of the resulting triangles in tri.\n\nReturn tri.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.tetrahedralize","page":"Meshing","title":"gmsh.model.mesh.tetrahedralize","text":"gmsh.model.mesh.tetrahedralize(coord)\n\nTetrahedralize the points given in the coord vector as triplets of x, y, z coordinates, and return the node tags (with numbering starting at 1) of the resulting tetrahedra in tetra.\n\nReturn tetra.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#Mesh-Size","page":"Meshing","title":"Mesh Size","text":"","category":"section"},{"location":"model/mesh/","page":"Meshing","title":"Meshing","text":"gmsh.model.mesh.field\ngmsh.model.mesh.field.add\ngmsh.model.mesh.field.remove\ngmsh.model.mesh.field.setNumber\ngmsh.model.mesh.field.setString\ngmsh.model.mesh.field.setNumbers\ngmsh.model.mesh.field.setAsBackgroundMesh\ngmsh.model.mesh.field.setAsBoundaryLayer","category":"page"},{"location":"model/mesh/#gmsh.model.mesh.field","page":"Meshing","title":"gmsh.model.mesh.field","text":"module gmsh.model.mesh.field\n\nMesh size field functions\n\n\n\n\n\n","category":"module"},{"location":"model/mesh/#gmsh.model.mesh.field.add","page":"Meshing","title":"gmsh.model.mesh.field.add","text":"gmsh.model.mesh.field.add(fieldType, tag = -1)\n\nAdd a new mesh size field of type fieldType. If tag is positive, assign the tag explicitly; otherwise a new tag is assigned automatically. Return the field tag.\n\nReturn an integer value.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.remove","page":"Meshing","title":"gmsh.model.mesh.field.remove","text":"gmsh.model.mesh.field.remove(tag)\n\nRemove the field with tag tag.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.setNumber","page":"Meshing","title":"gmsh.model.mesh.field.setNumber","text":"gmsh.model.mesh.field.setNumber(tag, option, value)\n\nSet the numerical option option to value value for field tag.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.setString","page":"Meshing","title":"gmsh.model.mesh.field.setString","text":"gmsh.model.mesh.field.setString(tag, option, value)\n\nSet the string option option to value value for field tag.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.setNumbers","page":"Meshing","title":"gmsh.model.mesh.field.setNumbers","text":"gmsh.model.mesh.field.setNumbers(tag, option, value)\n\nSet the numerical list option option to value value for field tag.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.setAsBackgroundMesh","page":"Meshing","title":"gmsh.model.mesh.field.setAsBackgroundMesh","text":"gmsh.model.mesh.field.setAsBackgroundMesh(tag)\n\nSet the field tag as the background mesh size field.\n\n\n\n\n\n","category":"function"},{"location":"model/mesh/#gmsh.model.mesh.field.setAsBoundaryLayer","page":"Meshing","title":"gmsh.model.mesh.field.setAsBoundaryLayer","text":"gmsh.model.mesh.field.setAsBoundaryLayer(tag)\n\nSet the field tag as a boundary layer size field.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#Gmsh-Options","page":"Options","title":"Gmsh Options","text":"","category":"section"},{"location":"options/options/","page":"Options","title":"Options","text":"gmsh.option.setNumber\ngmsh.option.getNumber\ngmsh.option.setString\ngmsh.option.getString\ngmsh.option.setColor\ngmsh.option.getColor","category":"page"},{"location":"options/options/#gmsh.option.setNumber","page":"Options","title":"gmsh.option.setNumber","text":"gmsh.option.setNumber(name, value)\n\nSet a numerical option to value. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#gmsh.option.getNumber","page":"Options","title":"gmsh.option.getNumber","text":"gmsh.option.getNumber(name)\n\nGet the value of a numerical option. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual.\n\nReturn value.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#gmsh.option.setString","page":"Options","title":"gmsh.option.setString","text":"gmsh.option.setString(name, value)\n\nSet a string option to value. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#gmsh.option.getString","page":"Options","title":"gmsh.option.getString","text":"gmsh.option.getString(name)\n\nGet the value of a string option. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual.\n\nReturn value.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#gmsh.option.setColor","page":"Options","title":"gmsh.option.setColor","text":"gmsh.option.setColor(name, r, g, b, a = 255)\n\nSet a color option to the RGBA value (r, g, b, a), where where r, g, b and a should be integers between 0 and 255. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual, with the \"Color.\" middle string removed.\n\n\n\n\n\n","category":"function"},{"location":"options/options/#gmsh.option.getColor","page":"Options","title":"gmsh.option.getColor","text":"gmsh.option.getColor(name)\n\nGet the r, g, b, a value of a color option. name is of the form \"category.option\" or \"category[num].option\". Available categories and options are listed in the Gmsh reference manual, with the \"Color.\" middle string removed.\n\nReturn r, g, b, a.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.jl","page":"Home","title":"gmsh.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"gmsh.jl wraps the Gmsh binaries (gmsh_jll.jl) and API in one registered package. The registered package just packs and gathers already built software. Issues related to Gmsh needs to be reported here.","category":"page"},{"location":"#Top-Level-Functions","page":"Home","title":"Top Level Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The developers of gmsh decided to split all functionalities across modules. However, a few top level functions exists:","category":"page"},{"location":"","page":"Home","title":"Home","text":"gmsh.initialize\ngmsh.finalize\ngmsh.open\ngmsh.merge\ngmsh.write\ngmsh.clear","category":"page"},{"location":"#gmsh.initialize","page":"Home","title":"gmsh.initialize","text":"gmsh.initialize(argv = Vector{String}(), readConfigFiles = true)\n\nInitialize Gmsh API. This must be called before any call to the other functions in the API. If argc and argv (or just argv in Python or Julia) are provided, they will be handled in the same way as the command line arguments in the Gmsh app. If readConfigFiles is set, read system Gmsh configuration files (gmshrc and gmsh-options). Initializing the API sets the options \"General.Terminal\" to 1 and \"General.AbortOnError\" to 2.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.finalize","page":"Home","title":"gmsh.finalize","text":"gmsh.finalize()\n\nFinalize the Gmsh API. This must be called when you are done using the Gmsh API.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.open","page":"Home","title":"gmsh.open","text":"gmsh.open(fileName)\n\nOpen a file. Equivalent to the File->Open menu in the Gmsh app. Handling of the file depends on its extension and/or its contents: opening a file with model data will create a new model.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.merge","page":"Home","title":"gmsh.merge","text":"gmsh.merge(fileName)\n\nMerge a file. Equivalent to the File->Merge menu in the Gmsh app. Handling of the file depends on its extension and/or its contents. Merging a file with model data will add the data to the current model.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.write","page":"Home","title":"gmsh.write","text":"gmsh.write(fileName)\n\nWrite a file. The export format is determined by the file extension.\n\n\n\n\n\n","category":"function"},{"location":"#gmsh.clear","page":"Home","title":"gmsh.clear","text":"gmsh.clear()\n\nClear all loaded models and post-processing data, and add a new empty model.\n\n\n\n\n\n","category":"function"}]
}
